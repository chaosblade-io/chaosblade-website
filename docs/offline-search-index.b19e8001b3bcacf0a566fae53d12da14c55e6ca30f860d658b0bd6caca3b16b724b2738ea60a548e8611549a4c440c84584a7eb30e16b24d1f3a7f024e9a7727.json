[{"body":"参数\nContainer 资源均支持以下参数。\n   参数 类型 说明 默认值     container-ids string 容器ID，支持配置多个    container-names string 容器名称，支持配置多个    docker-endpoint string Docker server 地址 默认为本地的 /var/run/docker.sock   namespace string Pod 所属的命名空间 default   evict-count string 限制实验生效的数量    evict-percent string 限制实验生效数量的百分比，不包含 %    labels string Pod 资源标签，多个标签之间是或的关系    names string Pod 资源名    waiting-time string 实验结果等待时间，参数值要包含单位，例如 10s，1m 20s   force  是否强制删除     ","excerpt":"参数\nContainer 资源均支持以下参数。\n   参数 类型 说明 默认值     container-ids string 容器ID，支持配置多个    container-names …","ref":"/chaosblade-website/docs/operator/container/","title":"Container 场景"},{"body":"","excerpt":"","ref":"/chaosblade-website/docs/operator/container/container-resource/","title":"Container 资源自身的场景"},{"body":"","excerpt":"","ref":"/chaosblade-website/docs/binaries/create/","title":"create 命令"},{"body":"指定一个节点，做 CPU 负载 80% 实验。\n参数    参数 类型 说明     timeout string 设定运行时长，单位是秒，通用参数   cpu-count string 指定 CPU 满载的个数   cpu-list string 指定 CPU 满载的具体核，核索引从 0 开始 (0-3 or 1,3)   cpu-percent string 指定 CPU 负载百分比，取值在 0-100    配置文件 实验配置文件：node_cpu_load.yaml\napiVersion:chaosblade.io/v1alpha1kind:ChaosBlademetadata:name:cpu-loadspec:experiments:- scope:nodetarget:cpuaction:fullloaddesc:\u0026#34;increase node cpu load by names\u0026#34;matchers:- name:namesvalue:- \u0026#34;docker20\u0026#34;- name:cpu-percentvalue:- \u0026#34;80\u0026#34;开始实验 选择一个节点，修改 node_cpu_load.yaml 中的 names 值。\n执行命令，开始实验：\n$ kubectl apply -f node_cpu_load.yaml 查看实验状态 执行 kubectl get blade cpu-load -o json 命令，查看实验状态：\n{ \u0026#34;apiVersion\u0026#34;: \u0026#34;chaosblade.io/v1alpha1\u0026#34;, \u0026#34;kind\u0026#34;: \u0026#34;ChaosBlade\u0026#34;, \u0026#34;metadata\u0026#34;: { \u0026#34;annotations\u0026#34;: { \u0026#34;kubectl.kubernetes.io/last-applied-configuration\u0026#34;: \u0026#34;{\\\u0026#34;apiVersion\\\u0026#34;:\\\u0026#34;chaosblade.io/v1alpha1\\\u0026#34;,\\\u0026#34;kind\\\u0026#34;:\\\u0026#34;ChaosBlade\\\u0026#34;,\\\u0026#34;metadata\\\u0026#34;:{\\\u0026#34;annotations\\\u0026#34;:{},\\\u0026#34;name\\\u0026#34;:\\\u0026#34;cpu-load\\\u0026#34;},\\\u0026#34;spec\\\u0026#34;:{\\\u0026#34;experiments\\\u0026#34;:[{\\\u0026#34;action\\\u0026#34;:\\\u0026#34;fullload\\\u0026#34;,\\\u0026#34;desc\\\u0026#34;:\\\u0026#34;increase node cpu load by names\\\u0026#34;,\\\u0026#34;matchers\\\u0026#34;:[{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;names\\\u0026#34;,\\\u0026#34;value\\\u0026#34;:[\\\u0026#34;docker20\\\u0026#34;]},{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;cpu-percent\\\u0026#34;,\\\u0026#34;value\\\u0026#34;:[\\\u0026#34;80\\\u0026#34;]}],\\\u0026#34;scope\\\u0026#34;:\\\u0026#34;node\\\u0026#34;,\\\u0026#34;target\\\u0026#34;:\\\u0026#34;cpu\\\u0026#34;}]}}\\n\u0026#34; }, \u0026#34;creationTimestamp\u0026#34;: \u0026#34;2020-06-08T02:14:04Z\u0026#34;, \u0026#34;finalizers\u0026#34;: [ \u0026#34;finalizer.chaosblade.io\u0026#34; ], \u0026#34;generation\u0026#34;: 1, \u0026#34;name\u0026#34;: \u0026#34;cpu-load\u0026#34;, \u0026#34;resourceVersion\u0026#34;: \u0026#34;974292\u0026#34;, \u0026#34;selfLink\u0026#34;: \u0026#34;/apis/chaosblade.io/v1alpha1/chaosblades/cpu-load\u0026#34;, \u0026#34;uid\u0026#34;: \u0026#34;21a10bcb-a5ab-4c9e-834a-95599768490a\u0026#34; }, \u0026#34;spec\u0026#34;: { \u0026#34;experiments\u0026#34;: [ { \u0026#34;action\u0026#34;: \u0026#34;fullload\u0026#34;, \u0026#34;desc\u0026#34;: \u0026#34;increase node cpu load by names\u0026#34;, \u0026#34;matchers\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;names\u0026#34;, \u0026#34;value\u0026#34;: [ \u0026#34;docker20\u0026#34; ] }, { \u0026#34;name\u0026#34;: \u0026#34;cpu-percent\u0026#34;, \u0026#34;value\u0026#34;: [ \u0026#34;80\u0026#34; ] } ], \u0026#34;scope\u0026#34;: \u0026#34;node\u0026#34;, \u0026#34;target\u0026#34;: \u0026#34;cpu\u0026#34; } ] }, \u0026#34;status\u0026#34;: { \u0026#34;expStatuses\u0026#34;: [ { \u0026#34;action\u0026#34;: \u0026#34;fullload\u0026#34;, \u0026#34;resStatuses\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;f5854d2a9b79cd79\u0026#34;, \u0026#34;kind\u0026#34;: \u0026#34;node\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;docker20\u0026#34;, \u0026#34;nodeName\u0026#34;: \u0026#34;docker20\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Success\u0026#34;, \u0026#34;success\u0026#34;: true, \u0026#34;uid\u0026#34;: \u0026#34;51d4553b-8da2-46ab-9b3d-51a11ae6d06f\u0026#34; } ], \u0026#34;scope\u0026#34;: \u0026#34;node\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Success\u0026#34;, \u0026#34;success\u0026#34;: true, \u0026#34;target\u0026#34;: \u0026#34;cpu\u0026#34; } ], \u0026#34;phase\u0026#34;: \u0026#34;Running\u0026#34; } } 观测结果 停止实验 执行命令：kubectl delete -f node_cpu_load.yaml\n或者直接删除 blade 资源：kubectl delete blade cpu-load\n","excerpt":"指定一个节点，做 CPU 负载 80% 实验。\n参数    参数 类型 说明     timeout string 设定运行时长，单位是秒，通用参数   cpu-count string 指定 CPU …","ref":"/chaosblade-website/docs/operator/node/node-resource/cpu-load/","title":"Node CPU 负载场景"},{"body":"","excerpt":"","ref":"/chaosblade-website/docs/operator/node/node-resource/","title":"Node 资源自身的场景"},{"body":"","excerpt":"","ref":"/chaosblade-website/try/operator-pod/","title":"Pod 实验场景"},{"body":"","excerpt":"","ref":"/chaosblade-website/docs/operator/pod/pod-resource/","title":"Pod 资源自身的场景"},{"body":"删除 chaosblade 命名空间下，Pod 名为 guestbook-7b87b7459f-cqkq2 中 container id 是 c6cdcf60b82b854bc4bab64308b466102245259d23e14e449590a8ed816403ed 的容器。\n配置文件 实验配置文件：remove_container_by_id.yaml\napiVersion:chaosblade.io/v1alpha1kind:ChaosBlademetadata:name:remove-container-by-idspec:experiments:- scope:containertarget:containeraction:removedesc:\u0026#34;remove container by id\u0026#34;matchers:- name:container-idsvalue:[\u0026#34;c6cdcf60b82b854bc4bab64308b466102245259d23e14e449590a8ed816403ed\u0026#34;]# pod name- name:namesvalue:[\u0026#34;guestbook-7b87b7459f-cqkq2\u0026#34;]- name:namespacevalue:[\u0026#34;chaosblade\u0026#34;]开始实验 获取 container 名称：\n$ kubectl get pod guestbook-7b87b7459f-cqkq2 -o custom-columns=CONTAINER:.status.containerStatuses[0].name,ID:.status.containerStatuses[0].containerID 修改 remove_container_by_id.yaml 中的 container-ids 和 names。\n执行命令，开始实验：\n$ kubectl apply -f remove_container_by_id.yaml 查看实验状态 执行 kubectl get blade remove-container-by-id -o json 命令，查看实验状态：\n{ \u0026#34;apiVersion\u0026#34;: \u0026#34;chaosblade.io/v1alpha1\u0026#34;, \u0026#34;kind\u0026#34;: \u0026#34;ChaosBlade\u0026#34;, \u0026#34;metadata\u0026#34;: { \u0026#34;annotations\u0026#34;: { \u0026#34;kubectl.kubernetes.io/last-applied-configuration\u0026#34;: \u0026#34;{\\\u0026#34;apiVersion\\\u0026#34;:\\\u0026#34;chaosblade.io/v1alpha1\\\u0026#34;,\\\u0026#34;kind\\\u0026#34;:\\\u0026#34;ChaosBlade\\\u0026#34;,\\\u0026#34;metadata\\\u0026#34;:{\\\u0026#34;annotations\\\u0026#34;:{},\\\u0026#34;name\\\u0026#34;:\\\u0026#34;remove-container-by-id\\\u0026#34;},\\\u0026#34;spec\\\u0026#34;:{\\\u0026#34;experiments\\\u0026#34;:[{\\\u0026#34;action\\\u0026#34;:\\\u0026#34;remove\\\u0026#34;,\\\u0026#34;desc\\\u0026#34;:\\\u0026#34;remove container by id\\\u0026#34;,\\\u0026#34;matchers\\\u0026#34;:[{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;container-ids\\\u0026#34;,\\\u0026#34;value\\\u0026#34;:[\\\u0026#34;5600afacf083f9ddb43fa43c186de235c18313ab1194844ad03b241ba8158166\\\u0026#34;]},{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;names\\\u0026#34;,\\\u0026#34;value\\\u0026#34;:[\\\u0026#34;guestbook-7b87b7459f-cqkq2\\\u0026#34;]},{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;namespace\\\u0026#34;,\\\u0026#34;value\\\u0026#34;:[\\\u0026#34;chaosblade\\\u0026#34;]}],\\\u0026#34;scope\\\u0026#34;:\\\u0026#34;container\\\u0026#34;,\\\u0026#34;target\\\u0026#34;:\\\u0026#34;container\\\u0026#34;}]}}\\n\u0026#34; }, \u0026#34;creationTimestamp\u0026#34;: \u0026#34;2020-06-04T03:31:18Z\u0026#34;, \u0026#34;finalizers\u0026#34;: [ \u0026#34;finalizer.chaosblade.io\u0026#34; ], \u0026#34;generation\u0026#34;: 1, \u0026#34;name\u0026#34;: \u0026#34;remove-container-by-id\u0026#34;, \u0026#34;resourceVersion\u0026#34;: \u0026#34;145441\u0026#34;, \u0026#34;selfLink\u0026#34;: \u0026#34;/apis/chaosblade.io/v1alpha1/chaosblades/remove-container-by-id\u0026#34;, \u0026#34;uid\u0026#34;: \u0026#34;8bc90e2e-9456-455f-81de-c6522e75a653\u0026#34; }, \u0026#34;spec\u0026#34;: { \u0026#34;experiments\u0026#34;: [ { \u0026#34;action\u0026#34;: \u0026#34;remove\u0026#34;, \u0026#34;desc\u0026#34;: \u0026#34;remove container by id\u0026#34;, \u0026#34;matchers\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;container-ids\u0026#34;, \u0026#34;value\u0026#34;: [ \u0026#34;5600afacf083f9ddb43fa43c186de235c18313ab1194844ad03b241ba8158166\u0026#34; ] }, { \u0026#34;name\u0026#34;: \u0026#34;names\u0026#34;, \u0026#34;value\u0026#34;: [ \u0026#34;guestbook-7b87b7459f-cqkq2\u0026#34; ] }, { \u0026#34;name\u0026#34;: \u0026#34;namespace\u0026#34;, \u0026#34;value\u0026#34;: [ \u0026#34;chaosblade\u0026#34; ] } ], \u0026#34;scope\u0026#34;: \u0026#34;container\u0026#34;, \u0026#34;target\u0026#34;: \u0026#34;container\u0026#34; } ] }, \u0026#34;status\u0026#34;: { \u0026#34;expStatuses\u0026#34;: [ { \u0026#34;action\u0026#34;: \u0026#34;remove\u0026#34;, \u0026#34;resStatuses\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;641cf55a4372a157\u0026#34;, \u0026#34;kind\u0026#34;: \u0026#34;container\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;guestbook\u0026#34;, \u0026#34;nodeName\u0026#34;: \u0026#34;keking\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Success\u0026#34;, \u0026#34;success\u0026#34;: true, \u0026#34;uid\u0026#34;: \u0026#34;5600afacf083f9ddb43fa43c186de235c18313ab1194844ad03b241ba8158166\u0026#34; } ], \u0026#34;scope\u0026#34;: \u0026#34;container\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Success\u0026#34;, \u0026#34;success\u0026#34;: true, \u0026#34;target\u0026#34;: \u0026#34;container\u0026#34; } ], \u0026#34;phase\u0026#34;: \u0026#34;Running\u0026#34; } } 观测结果 停止实验 执行命令：kubectl delete -f remove_container_by_id.yaml\n或者直接删除 blade 资源：kubectl delete blade remove-container-by-id\n","excerpt":"删除 chaosblade 命名空间下，Pod 名为 guestbook-7b87b7459f-cqkq2 中 container id …","ref":"/chaosblade-website/docs/operator/container/container-resource/remove/","title":"删除 Container 场景"},{"body":"删除 chaosblade 命名空间下标签是 role=master 的 pod。\n执行观测 开始观察需要删除的 pod：\nkubectl get pod -l \u0026#34;role=master\u0026#34; -n chaosblade -w 配置文件 实验配置文件：delete_pod_by_labels.yaml\napiVersion:chaosblade.io/v1alpha1kind:ChaosBlademetadata:name:delete-two-pod-by-labelsspec:experiments:- scope:podtarget:podaction:deletedesc:\u0026#34;delete pod by labels\u0026#34;matchers:- name:labelsvalue:- \u0026#34;role=master\u0026#34;- name:namespacevalue:- \u0026#34;chaosblade\u0026#34;- name:evict-countvalue:- \u0026#34;2\u0026#34;开始实验 新建终端，并开始实验：\nkubectl apply -f delete_pod_by_labels.yaml 查看实验状态 执行命令：kubectl get blade delete-two-pod-by-labels -o json，查看实验状态：\n{ \u0026#34;apiVersion\u0026#34;: \u0026#34;chaosblade.io/v1alpha1\u0026#34;, \u0026#34;kind\u0026#34;: \u0026#34;ChaosBlade\u0026#34;, \u0026#34;metadata\u0026#34;: { \u0026#34;annotations\u0026#34;: { \u0026#34;kubectl.kubernetes.io/last-applied-configuration\u0026#34;: \u0026#34;{\\\u0026#34;apiVersion\\\u0026#34;:\\\u0026#34;chaosblade.io/v1alpha1\\\u0026#34;,\\\u0026#34;kind\\\u0026#34;:\\\u0026#34;ChaosBlade\\\u0026#34;,\\\u0026#34;metadata\\\u0026#34;:{\\\u0026#34;annotations\\\u0026#34;:{},\\\u0026#34;name\\\u0026#34;:\\\u0026#34;delete-two-pod-by-labels\\\u0026#34;},\\\u0026#34;spec\\\u0026#34;:{\\\u0026#34;experiments\\\u0026#34;:[{\\\u0026#34;action\\\u0026#34;:\\\u0026#34;delete\\\u0026#34;,\\\u0026#34;desc\\\u0026#34;:\\\u0026#34;delete pod by labels\\\u0026#34;,\\\u0026#34;matchers\\\u0026#34;:[{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;labels\\\u0026#34;,\\\u0026#34;value\\\u0026#34;:[\\\u0026#34;role=maste\\\u0026#34;]},{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;namespace\\\u0026#34;,\\\u0026#34;value\\\u0026#34;:[\\\u0026#34;chaosblade\\\u0026#34;]},{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;evict-count\\\u0026#34;,\\\u0026#34;value\\\u0026#34;:[\\\u0026#34;2\\\u0026#34;]}],\\\u0026#34;scope\\\u0026#34;:\\\u0026#34;pod\\\u0026#34;,\\\u0026#34;target\\\u0026#34;:\\\u0026#34;pod\\\u0026#34;}]}}\\n\u0026#34; }, \u0026#34;creationTimestamp\u0026#34;: \u0026#34;2020-06-01T02:11:36Z\u0026#34;, \u0026#34;finalizers\u0026#34;: [ \u0026#34;finalizer.chaosblade.io\u0026#34; ], \u0026#34;generation\u0026#34;: 1, \u0026#34;name\u0026#34;: \u0026#34;delete-two-pod-by-labels\u0026#34;, \u0026#34;resourceVersion\u0026#34;: \u0026#34;10139772\u0026#34;, \u0026#34;selfLink\u0026#34;: \u0026#34;/apis/chaosblade.io/v1alpha1/chaosblades/delete-two-pod-by-labels\u0026#34;, \u0026#34;uid\u0026#34;: \u0026#34;5eec72c7-b52b-4c35-a3b4-e6f6772f496b\u0026#34; }, \u0026#34;spec\u0026#34;: { \u0026#34;experiments\u0026#34;: [ { \u0026#34;action\u0026#34;: \u0026#34;delete\u0026#34;, \u0026#34;desc\u0026#34;: \u0026#34;delete pod by labels\u0026#34;, \u0026#34;matchers\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;labels\u0026#34;, \u0026#34;value\u0026#34;: [ \u0026#34;role=maste\u0026#34; ] }, { \u0026#34;name\u0026#34;: \u0026#34;namespace\u0026#34;, \u0026#34;value\u0026#34;: [ \u0026#34;chaosblade\u0026#34; ] }, { \u0026#34;name\u0026#34;: \u0026#34;evict-count\u0026#34;, \u0026#34;value\u0026#34;: [ \u0026#34;2\u0026#34; ] } ], \u0026#34;scope\u0026#34;: \u0026#34;pod\u0026#34;, \u0026#34;target\u0026#34;: \u0026#34;pod\u0026#34; } ] }, \u0026#34;status\u0026#34;: { \u0026#34;expStatuses\u0026#34;: [ { \u0026#34;action\u0026#34;: \u0026#34;delete\u0026#34;, \u0026#34;resStatuses\u0026#34;: [ { \u0026#34;kind\u0026#34;: \u0026#34;pod\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;redis-8488c84bb7-w5gzl\u0026#34;, \u0026#34;nodeName\u0026#34;: \u0026#34;keking\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Success\u0026#34;, \u0026#34;success\u0026#34;: true, \u0026#34;uid\u0026#34;: \u0026#34;b61981d7-f1f8-43a7-885f-d2db012f7647\u0026#34; } ], \u0026#34;scope\u0026#34;: \u0026#34;pod\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Success\u0026#34;, \u0026#34;success\u0026#34;: true, \u0026#34;target\u0026#34;: \u0026#34;pod\u0026#34; } ], \u0026#34;phase\u0026#34;: \u0026#34;Running\u0026#34; } } 等待 phase 状态变为 Running\n查看实验结果 可以看到 pod 名称发生变化，表示原 pod 已被删除。\n停止实验 执行命令：kubectl delete -f delete_pod_by_labels.yaml\n或者直接删除 blade 资源：kubectl delete blade delete-two-pod-by-labels\n","excerpt":"删除 chaosblade 命名空间下标签是 role=master 的 pod。\n执行观测 开始观察需要删除的 pod：\nkubectl get pod -l …","ref":"/chaosblade-website/docs/operator/pod/pod-resource/remove/","title":"删除 Pod"},{"body":"CLI 安装 下载 chaosblade 获取 chaosblade 最新的 release 包，目前支持的平台是 linux/amd64 和 darwin/64，下载对应平台的包。\n下载完成后解压即可，无需编译。\n使用 chaosblade 进入解压后的文件夹，可以看到以下内容：\n├── bin │ ├── chaos_burncpu │ ├── chaos_burnio │ ├── chaos_changedns │ ├── chaos_delaynetwork │ ├── chaos_dropnetwork │ ├── chaos_filldisk │ ├── chaos_killprocess │ ├── chaos_lossnetwork │ ├── jvm.spec.yaml │ └── tools.jar ├── blade └── lib └── sandbox 其中 blade 是可执行文件，即 chaosblade 工具的 cli，混沌实验执行的工具。执行 ./blade help 可以查看支持命令有哪些：\nAn easy to use and powerful chaos engineering experiment toolkit Usage: blade [command] Available Commands: create Create a chaos engineering experiment destroy Destroy a chaos experiment help Help about any command prepare Prepare to experiment revoke Undo chaos engineering experiment preparation status Query preparation stage or experiment status version Print version info Flags: -d, --debug Set client to DEBUG mode -h, --help help for blade Use \u0026quot;blade [command] --help\u0026quot; for more information about a command. Operator 安装 在 Kubernetes 平台上运行 ChaosBlade，请使用 ChaosBlade Operator。\nChaosBlade Operator 需要使用 Helm 安装，进入 release 页面 下载安装包（ChaosBlade 还提供了阿里云 OSS 的下载地址，提升国内下载速度）。\n使用 Helm 3 安装：\n# 下载安装包 $ wget -qO chaosblade-operator-0.6.0.tgz https://chaosblade.oss-cn-hangzhou.aliyuncs.com/agent/github/0.6.0/chaosblade-operator-0.6.0-v3.tgz # 为 chaosblade 创建一个 namespace $ kubectl create namespace chaosblade # 安装 ChaosBlade-Operator $ helm install chaos chaosblade-operator-0.6.0.tgz --set webhook.enable=true --namespace=chaosblade # 查看安装结果 $ kubectl get pod -n chaosblade | grep chaosblade chaosblade-operator-6b6b484599-gdgq8 1/1 Running 0 4d23h chaosblade-tool-7wtph 1/1 Running 0 4d20h chaosblade-tool-r4zdk 1/1 Running 0 4d23h  ChaosBlade Operator 启动后将会在每个节点部署一个 chaosblade-tool Pod 和一个 chaosblade-operator Pod，如果都运行正常，则安装成功。上面设置 --set webhook.enable=true 是为了进行 Pod 文件系统 I/O 故障实验，如果不需要进行该实验，则无需添加该设置。\n ","excerpt":"CLI 安装 下载 chaosblade 获取 chaosblade 最新的 release 包，目前支持的平台是 linux/amd64 和 darwin/64，下载对应平台的包。\n下载完成后解压即 …","ref":"/chaosblade-website/docs/quickstart/installation/","title":"安装部署"},{"body":"","excerpt":"","ref":"/chaosblade-website/docs/quickstart/","title":"快速开始"},{"body":"ChaosBlade 使用 [Hugo] 的 Docsy 主题，并在其基础上进行了定制。\n前提条件  安装 hugo Clone chaosblade docs  git clone https://github.com/chaosblade-io/website.git \u0026amp;\u0026amp; cd website/    运行 在本地运行站点：\nhugo serve 运行状态：\nBuilding sites … WARN 2020/06/22 16:51:44 Page.URL is deprecated and will be removed in a future release. Use .Permalink or .RelPermalink. If what you want is the front matter URL value, use .Params.url | ZH -------------------+----- Pages | 63 Paginator pages | 0 Non-page files | 2 Static files | 68 Processed images | 6 Aliases | 3 Sitemaps | 1 Cleaned | 0 Built in 401 ms Watching for changes in /Users/guoxudong/github/chaosblade-web/chaos-website/{archetypes,assets,content,layouts,static,themes} Watching for config changes in /Users/guoxudong/github/chaosblade-web/chaos-website/config.toml, /Users/guoxudong/github/chaosblade-web/chaos-website/themes/docsy/config.toml Environment: \u0026#34;development\u0026#34; Serving pages from memory Running in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender Web Server is available at //localhost:1313/ (bind address 127.0.0.1) Press Ctrl+C to stop 发布 在完成文档更新后，运行 hugo 命令即可完成前端页面文件的渲染，渲染后的文件存放在 public 目录中。\nhugo 渲染完成：\n| EN -------------------+----- Pages | 99 Paginator pages | 0 Non-page files | 0 Static files | 47 Processed images | 0 Aliases | 2 Sitemaps | 1 Cleaned | 0 之后将修改内容放入一个 commit 中，提交 PR 即可（建议一个功能一个 PR），\n在你的 fork 仓库中发布 为了方便 review，请将修改后的内容在你的 fork 仓库中以 GitHub Pages 的形式发布，以提供预览。\n为 fork 仓库设置 GitHub Pages  进入仓库的 Settings 页面 跳转到 GitHub Pages 部分 设置源为 master 分支的 /public 目录  发布到 GitHub Pages 为了使 GitHub Page 设置生效，请将更改推送到 fork 仓库的 master 分支。\n  更改 /content/zh 中的内容 在根目录运行 hugo 命令 提交更改并将其推送到 fork 仓库的 master 分支 几分钟后，应该就可以在 fork 仓库的 GitHub Pages 页面看到文档  例如：https://sunny0826.github.io/chaosblade/   之后请将预览页面地址贴在 PR 的 commented 中  ","excerpt":"ChaosBlade 使用 [Hugo] 的 Docsy 主题，并在其基础上进行了定制。\n前提条件  安装 hugo Clone chaosblade docs  git clone …","ref":"/chaosblade-website/contributing/docs/","title":"撰写文档"},{"body":"给 kubernetes 的 pod 注入文件系统I/O故障。\n注意：此场景需要激活 --webhook-enable 参数，如需使用此功能，请在 chaosblade-operator 参数中添加 --webhook-enable，或者在安装时指定：例如 helm 安装时添加 --set webhook.enable=true 指定。\n 实验参数    参数 类型 说明     methods string I/O故障方法。   delay string I/O延迟时间。   errno string 指定特性的I/O异常错误码。   random string 随机产生I/O异常错误码。   percent string I/O错误百分比 [0-100]。   path string I/O异常的目录或者文件。    前提条件  集群中部署了 chaosblade-admission-webhook 需要注入故障的 volume 设置 mountPropagation 为 HostToContainer pod 上面添加了如下 annotations: chaosblade/inject-volume:\u0026#34;data\u0026#34;//需要注入故障的volumenamechaosblade/inject-volume-subpath:\u0026#34;conf\u0026#34;//volume挂载的子目录  部署测试 pod chaosblade webhook 会根据 pod 的 annotation，注入 fuse 的 sidecar 容器：\n chaosblade/inject-volume 指明需要注入故障的 volume name，比如例子中的 data。 chaosblade/inject-volume-subpath 指明 volume 挂载路径的子目录。上面的例子中，volume 的挂载路径是 /data,子目录是 conf，则在 pod 内，注入I/O异常的目录是 /data/conf。 指定需要注入故障的 volume 需要指定 mountPropagation：HostToContainer，这个字段的含义可以参考官方文档 Volumes。  测试 pod 配置文件：io-test-pod.yaml\napiVersion:apps/v1kind:Deploymentmetadata:labels:app:testname:testnamespace:chaosbladespec:replicas:1selector:matchLabels:app:testtemplate:metadata:annotations:chaosblade/inject-volume:datachaosblade/inject-volume-subpath:conflabels:app:testspec:containers:- command:[\u0026#34;/bin/sh\u0026#34;,\u0026#34;-c\u0026#34;,\u0026#34;while true; do sleep 10000; done\u0026#34;]image:busyboximagePullPolicy:IfNotPresentname:testvolumeMounts:- mountPath:/datamountPropagation:HostToContainername:datavolumes:- hostPath:path:/data/fusename:data部署\n# 部署测试 pod $ kubectl apply -f io-test-pod.yaml # 查看 sidecar 是否注入成功 $ kubectl get pod test-7c9fc6fd88-7lx6b -n chaosblade NAME READY STATUS RESTARTS AGE test-7c9fc6fd88-7lx6b 2/2 Running 0 4m8s 配置文件 实验配置文件：pod_io.yaml\napiVersion:chaosblade.io/v1alpha1kind:ChaosBlademetadata:name:inject-pod-by-labelsspec:experiments:- scope:podtarget:podaction:IOdesc:\u0026#34;Pod IO Exception by labels\u0026#34;matchers:- name:labelsvalue:- \u0026#34;app=test\u0026#34;- name:namespacevalue:- \u0026#34;chaosblade\u0026#34;- name:methodvalue:- \u0026#34;read\u0026#34;- name:delayvalue:- \u0026#34;1000\u0026#34;- name:pathvalue:- \u0026#34;\u0026#34;- name:percentvalue:- \u0026#34;60\u0026#34;- name:errnovalue:- \u0026#34;28\u0026#34;开始实验 执行命令，开始实验：\nkubectl apply -f pod_io.yaml 查看实验状态 执行 kubectl get blade inject-pod-by-labels -o json  命令，查看实验状态：\n{ \u0026#34;apiVersion\u0026#34;: \u0026#34;chaosblade.io/v1alpha1\u0026#34;, \u0026#34;kind\u0026#34;: \u0026#34;ChaosBlade\u0026#34;, \u0026#34;metadata\u0026#34;: { \u0026#34;annotations\u0026#34;: { \u0026#34;kubectl.kubernetes.io/last-applied-configuration\u0026#34;: \u0026#34;{\\\u0026#34;apiVersion\\\u0026#34;:\\\u0026#34;chaosblade.io/v1alpha1\\\u0026#34;,\\\u0026#34;kind\\\u0026#34;:\\\u0026#34;ChaosBlade\\\u0026#34;,\\\u0026#34;metadata\\\u0026#34;:{\\\u0026#34;annotations\\\u0026#34;:{},\\\u0026#34;name\\\u0026#34;:\\\u0026#34;inject-pod-by-labels\\\u0026#34;},\\\u0026#34;spec\\\u0026#34;:{\\\u0026#34;experiments\\\u0026#34;:[{\\\u0026#34;action\\\u0026#34;:\\\u0026#34;IO\\\u0026#34;,\\\u0026#34;desc\\\u0026#34;:\\\u0026#34;Pod IO Exception by labels\\\u0026#34;,\\\u0026#34;matchers\\\u0026#34;:[{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;labels\\\u0026#34;,\\\u0026#34;value\\\u0026#34;:[\\\u0026#34;app=test\\\u0026#34;]},{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;namespace\\\u0026#34;,\\\u0026#34;value\\\u0026#34;:[\\\u0026#34;chaosblade\\\u0026#34;]},{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;method\\\u0026#34;,\\\u0026#34;value\\\u0026#34;:[\\\u0026#34;read\\\u0026#34;]},{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;delay\\\u0026#34;,\\\u0026#34;value\\\u0026#34;:[\\\u0026#34;1000\\\u0026#34;]},{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;path\\\u0026#34;,\\\u0026#34;value\\\u0026#34;:[\\\u0026#34;\\\u0026#34;]},{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;percent\\\u0026#34;,\\\u0026#34;value\\\u0026#34;:[\\\u0026#34;60\\\u0026#34;]},{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;errno\\\u0026#34;,\\\u0026#34;value\\\u0026#34;:[\\\u0026#34;28\\\u0026#34;]}],\\\u0026#34;scope\\\u0026#34;:\\\u0026#34;pod\\\u0026#34;,\\\u0026#34;target\\\u0026#34;:\\\u0026#34;pod\\\u0026#34;}]}}\\n\u0026#34; }, \u0026#34;creationTimestamp\u0026#34;: \u0026#34;2020-06-02T07:45:31Z\u0026#34;, \u0026#34;finalizers\u0026#34;: [ \u0026#34;finalizer.chaosblade.io\u0026#34; ], \u0026#34;generation\u0026#34;: 1, \u0026#34;name\u0026#34;: \u0026#34;inject-pod-by-labels\u0026#34;, \u0026#34;resourceVersion\u0026#34;: \u0026#34;7725368\u0026#34;, \u0026#34;selfLink\u0026#34;: \u0026#34;/apis/chaosblade.io/v1alpha1/chaosblades/inject-pod-by-labels\u0026#34;, \u0026#34;uid\u0026#34;: \u0026#34;302bed87-0dce-4179-8b25-6a87588906fa\u0026#34; }, \u0026#34;spec\u0026#34;: { \u0026#34;experiments\u0026#34;: [ { \u0026#34;action\u0026#34;: \u0026#34;IO\u0026#34;, \u0026#34;desc\u0026#34;: \u0026#34;Pod IO Exception by labels\u0026#34;, \u0026#34;matchers\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;labels\u0026#34;, \u0026#34;value\u0026#34;: [ \u0026#34;app=test\u0026#34; ] }, { \u0026#34;name\u0026#34;: \u0026#34;namespace\u0026#34;, \u0026#34;value\u0026#34;: [ \u0026#34;chaosblade\u0026#34; ] }, { \u0026#34;name\u0026#34;: \u0026#34;method\u0026#34;, \u0026#34;value\u0026#34;: [ \u0026#34;read\u0026#34; ] }, { \u0026#34;name\u0026#34;: \u0026#34;delay\u0026#34;, \u0026#34;value\u0026#34;: [ \u0026#34;1000\u0026#34; ] }, { \u0026#34;name\u0026#34;: \u0026#34;path\u0026#34;, \u0026#34;value\u0026#34;: [ \u0026#34;\u0026#34; ] }, { \u0026#34;name\u0026#34;: \u0026#34;percent\u0026#34;, \u0026#34;value\u0026#34;: [ \u0026#34;60\u0026#34; ] }, { \u0026#34;name\u0026#34;: \u0026#34;errno\u0026#34;, \u0026#34;value\u0026#34;: [ \u0026#34;28\u0026#34; ] } ], \u0026#34;scope\u0026#34;: \u0026#34;pod\u0026#34;, \u0026#34;target\u0026#34;: \u0026#34;pod\u0026#34; } ] }, \u0026#34;status\u0026#34;: { \u0026#34;expStatuses\u0026#34;: [ { \u0026#34;action\u0026#34;: \u0026#34;IO\u0026#34;, \u0026#34;resStatuses\u0026#34;: [ { \u0026#34;kind\u0026#34;: \u0026#34;pod\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;test-7c9fc6fd88-7lx6b\u0026#34;, \u0026#34;nodeName\u0026#34;: \u0026#34;keking\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Success\u0026#34;, \u0026#34;success\u0026#34;: true, \u0026#34;uid\u0026#34;: \u0026#34;18fd4930-28d0-41f2-b8af-7dc9f08b39a8\u0026#34; } ], \u0026#34;scope\u0026#34;: \u0026#34;pod\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Success\u0026#34;, \u0026#34;success\u0026#34;: true, \u0026#34;target\u0026#34;: \u0026#34;pod\u0026#34; } ], \u0026#34;phase\u0026#34;: \u0026#34;Running\u0026#34; } } 观测结果 # 进入实验 pod $ kubectl exec -it test-7c9fc6fd88-7lx6b bash # 在 pod 内读取指定目录中的文件，如果没有可以新建一个 $ time cat /data/conf/test.yaml cat: read error: No space left on device real 0m3.007s user 0m0.002s sys 0m0.002s # 因为有重试，显示有 3s 的延迟 # 因为设置了 60% 的异常，所有还是有成功的情况 $ time cat /data/conf/test.yaml 123 real 0m0.004s user 0m0.002s sys 0m0.000s 在本例中，我们对 read 操作注入两种异常，异常率为百分之60:\n 对 read 操作增加 1s 的延迟。 对 read 操作返回错误 28。  这里只是做了一种类型的实验，更多的实验类型详见官方文档。\n停止实验 执行命令：kubectl delete -f pod_io.yaml\n或者直接删除 blade 资源：kubectl delete blade inject-pod-by-labels\n删除测试 pod：kubectl delete -f io-test-pod.yaml\n附录 支持的I/O故障方法\nopen read write mkdir rmdir opendir fsync flush release truncate getattr chown chmod utimens allocate getlk setlk setlkw statfs readlink symlink create access link mknod rename unlink getxattr listxattr removexattr setxattr\nI/O异常错误码\n   错误码 错误信息     1 Operation not permitted   2 No such file or directory   5 I/O error   6 No such device or address   12 Out of memory   16 Device or resource busy   17 File exists   20 Not a directory   22 Invalid argument   24 Too many open files   28 No space left on device    ","excerpt":"给 kubernetes 的 pod 注入文件系统I/O故障。\n注意：此场景需要激活 --webhook-enable 参数，如需使用此功能，请在 chaosblade-operator …","ref":"/chaosblade-website/docs/operator/pod/pod-io/pod-io-error/","title":"文件系统 I/O 故障"},{"body":"此实验会删除指定容器中的 redis-server 进程。\n参数    参数 类型 说明     process string 进程关键词，会在整个命令行中查找   process-cmd string 进程命令，只会在命令中查找   count string 限制杀掉进程的数量，0 表示无限制   signal string 指定杀进程的信号量，默认是 9，例如 \u0026ndash;signal 15   timeout string 设定运行时长，单位是秒，通用参数    配置文件 实验配置文件：kill_container_process_by_id.yaml\napiVersion:chaosblade.io/v1alpha1kind:ChaosBlademetadata:name:kill-container-process-by-idspec:experiments:- scope:containertarget:processaction:killdesc:\u0026#34;kill container process by id\u0026#34;matchers:- name:container-idsvalue:- \u0026#34;94bc61ac84fb505f3f89b3ce5e4cc804ea8501ed091940b17b0f492835dc57d1\u0026#34;- name:processvalue:[\u0026#34;redis-server\u0026#34;]- name:namesvalue:[\u0026#34;redis-slave-55d8c8ffbd-4pz8m\u0026#34;]- name:namespacevalue:[\u0026#34;chaosblade\u0026#34;]开始实验 选择一个 pod，获取容器 ID ，修改 kill_container_process_by_id.yaml 中的 container-ids 值。\n执行命令，开始实验：\n$ kubectl apply -f kill_container_process_by_id.yaml 查看实验状态 执行 kubectl get blade kill-container-process-by-id -o json 命令，查看实验状态：\n{ \u0026#34;apiVersion\u0026#34;: \u0026#34;v1\u0026#34;, \u0026#34;items\u0026#34;: [ { \u0026#34;apiVersion\u0026#34;: \u0026#34;chaosblade.io/v1alpha1\u0026#34;, \u0026#34;kind\u0026#34;: \u0026#34;ChaosBlade\u0026#34;, \u0026#34;metadata\u0026#34;: { \u0026#34;annotations\u0026#34;: { \u0026#34;kubectl.kubernetes.io/last-applied-configuration\u0026#34;: \u0026#34;{\\\u0026#34;apiVersion\\\u0026#34;:\\\u0026#34;chaosblade.io/v1alpha1\\\u0026#34;,\\\u0026#34;kind\\\u0026#34;:\\\u0026#34;ChaosBlade\\\u0026#34;,\\\u0026#34;metadata\\\u0026#34;:{\\\u0026#34;annotations\\\u0026#34;:{},\\\u0026#34;name\\\u0026#34;:\\\u0026#34;kill-container-process-by-id\\\u0026#34;},\\\u0026#34;spec\\\u0026#34;:{\\\u0026#34;experiments\\\u0026#34;:[{\\\u0026#34;action\\\u0026#34;:\\\u0026#34;kill\\\u0026#34;,\\\u0026#34;desc\\\u0026#34;:\\\u0026#34;kill container process by id\\\u0026#34;,\\\u0026#34;matchers\\\u0026#34;:[{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;container-ids\\\u0026#34;,\\\u0026#34;value\\\u0026#34;:[\\\u0026#34;bfc9ca01fac33f60d300485f96549644b634f274351df1d4897526451f49e3fb\\\u0026#34;]},{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;process\\\u0026#34;,\\\u0026#34;value\\\u0026#34;:[\\\u0026#34;redis-server\\\u0026#34;]},{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;names\\\u0026#34;,\\\u0026#34;value\\\u0026#34;:[\\\u0026#34;redis-slave-55d8c8ffbd-4pz8m\\\u0026#34;]},{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;namespace\\\u0026#34;,\\\u0026#34;value\\\u0026#34;:[\\\u0026#34;chaosblade\\\u0026#34;]}],\\\u0026#34;scope\\\u0026#34;:\\\u0026#34;container\\\u0026#34;,\\\u0026#34;target\\\u0026#34;:\\\u0026#34;process\\\u0026#34;}]}}\\n\u0026#34; }, \u0026#34;creationTimestamp\u0026#34;: \u0026#34;2020-06-11T01:34:44Z\u0026#34;, \u0026#34;finalizers\u0026#34;: [ \u0026#34;finalizer.chaosblade.io\u0026#34; ], \u0026#34;generation\u0026#34;: 1, \u0026#34;name\u0026#34;: \u0026#34;kill-container-process-by-id\u0026#34;, \u0026#34;resourceVersion\u0026#34;: \u0026#34;1600447\u0026#34;, \u0026#34;selfLink\u0026#34;: \u0026#34;/apis/chaosblade.io/v1alpha1/chaosblades/kill-container-process-by-id\u0026#34;, \u0026#34;uid\u0026#34;: \u0026#34;fd4ea009-b974-49b0-a744-dc0004bef79a\u0026#34; }, \u0026#34;spec\u0026#34;: { \u0026#34;experiments\u0026#34;: [ { \u0026#34;action\u0026#34;: \u0026#34;kill\u0026#34;, \u0026#34;desc\u0026#34;: \u0026#34;kill container process by id\u0026#34;, \u0026#34;matchers\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;container-ids\u0026#34;, \u0026#34;value\u0026#34;: [ \u0026#34;bfc9ca01fac33f60d300485f96549644b634f274351df1d4897526451f49e3fb\u0026#34; ] }, { \u0026#34;name\u0026#34;: \u0026#34;process\u0026#34;, \u0026#34;value\u0026#34;: [ \u0026#34;redis-server\u0026#34; ] }, { \u0026#34;name\u0026#34;: \u0026#34;names\u0026#34;, \u0026#34;value\u0026#34;: [ \u0026#34;redis-slave-55d8c8ffbd-4pz8m\u0026#34; ] }, { \u0026#34;name\u0026#34;: \u0026#34;namespace\u0026#34;, \u0026#34;value\u0026#34;: [ \u0026#34;chaosblade\u0026#34; ] } ], \u0026#34;scope\u0026#34;: \u0026#34;container\u0026#34;, \u0026#34;target\u0026#34;: \u0026#34;process\u0026#34; } ] }, \u0026#34;status\u0026#34;: { \u0026#34;expStatuses\u0026#34;: [ { \u0026#34;action\u0026#34;: \u0026#34;kill\u0026#34;, \u0026#34;resStatuses\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;4431cdce8d038643\u0026#34;, \u0026#34;kind\u0026#34;: \u0026#34;container\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;redis-slave\u0026#34;, \u0026#34;nodeName\u0026#34;: \u0026#34;docker20\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Success\u0026#34;, \u0026#34;success\u0026#34;: true, \u0026#34;uid\u0026#34;: \u0026#34;bfc9ca01fac33f60d300485f96549644b634f274351df1d4897526451f49e3fb\u0026#34; } ], \u0026#34;scope\u0026#34;: \u0026#34;container\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Success\u0026#34;, \u0026#34;success\u0026#34;: true, \u0026#34;target\u0026#34;: \u0026#34;process\u0026#34; } ], \u0026#34;phase\u0026#34;: \u0026#34;Running\u0026#34; } } ], \u0026#34;kind\u0026#34;: \u0026#34;List\u0026#34;, \u0026#34;metadata\u0026#34;: { \u0026#34;resourceVersion\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;selfLink\u0026#34;: \u0026#34;\u0026#34; } } 观测结果 # 开始实验前查看容器 id $ kubectl get pod redis-slave-55d8c8ffbd-4pz8m -o custom-columns=POD_NAME:.metadata.name,CONTAINER:.status.containerStatuses[0].name,ID:.status.containerStatuses[0].containerID POD_NAME CONTAINER ID redis-slave-55d8c8ffbd-4pz8m redis-master docker://bfc9ca01fac33f60d300485f96549644b634f274351df1d4897526451f49e3fb # 实验后查看容器 id $ kubectl get pod redis-slave-55d8c8ffbd-4pz8m -o custom-columns=POD_NAME:.metadata.name,CONTAINER:.status.containerStatuses[0].name,ID:.status.containerStatuses[0].containerID POD_NAME CONTAINER ID redis-slave-55d8c8ffbd-4pz8m redis-slave docker://94bc61ac84fb505f3f89b3ce5e4cc804ea8501ed091940b17b0f492835dc57d1 容器 id 变化，主进程被杀掉后容器进行了重启，符合实验逾期。\nredis-server 的进程号发生改变，说明被杀掉后，又被重新拉起。\n停止实验 执行命令：kubectl delete -f kill_container_process_by_id.yaml\n或者直接删除 blade 资源：kubectl delete blade kill-container-process-by-id\n","excerpt":"此实验会删除指定容器中的 redis-server 进程。\n参数    参数 类型 说明     process string 进程关键词，会在整个命令行中查找   process-cmd …","ref":"/chaosblade-website/docs/operator/container/container-process/kill_container_process/","title":"杀指定进程场景"},{"body":"此实验会删除指定节点上的 redis-server 进程。\n参数    参数 类型 说明     process string 进程关键词，会在整个命令行中查找   process-cmd string 进程命令，只会在命令中查找   count string 限制杀掉进程的数量，0 表示无限制   signal string 指定杀进程的信号量，默认是 9，例如 \u0026ndash;signal 15   timeout string 设定运行时长，单位是秒，通用参数    配置文件 实验配置文件：kill_node_process_by_names.yaml\napiVersion:chaosblade.io/v1alpha1kind:ChaosBlademetadata:name:kill-node-process-by-namesspec:experiments:- scope:nodetarget:processaction:killdesc:\u0026#34;kill node process by names\u0026#34;matchers:- name:namesvalue:[\u0026#34;docker20\u0026#34;]- name:processvalue:[\u0026#34;redis-server\u0026#34;]开始实验 选择一个节点，修改 kill_node_process_by_names.yaml 中的 names 值。\n执行命令，开始实验：\n$ kubectl apply -f kill_node_process_by_names.yaml 查看实验状态 执行 kubectl get blade kill-node-process-by-names -o json 命令，查看实验状态：\n{ \u0026#34;apiVersion\u0026#34;: \u0026#34;chaosblade.io/v1alpha1\u0026#34;, \u0026#34;kind\u0026#34;: \u0026#34;ChaosBlade\u0026#34;, \u0026#34;metadata\u0026#34;: { \u0026#34;annotations\u0026#34;: { \u0026#34;kubectl.kubernetes.io/last-applied-configuration\u0026#34;: \u0026#34;{\\\u0026#34;apiVersion\\\u0026#34;:\\\u0026#34;chaosblade.io/v1alpha1\\\u0026#34;,\\\u0026#34;kind\\\u0026#34;:\\\u0026#34;ChaosBlade\\\u0026#34;,\\\u0026#34;metadata\\\u0026#34;:{\\\u0026#34;annotations\\\u0026#34;:{},\\\u0026#34;name\\\u0026#34;:\\\u0026#34;kill-node-process-by-names\\\u0026#34;},\\\u0026#34;spec\\\u0026#34;:{\\\u0026#34;experiments\\\u0026#34;:[{\\\u0026#34;action\\\u0026#34;:\\\u0026#34;kill\\\u0026#34;,\\\u0026#34;desc\\\u0026#34;:\\\u0026#34;kill node process by names\\\u0026#34;,\\\u0026#34;matchers\\\u0026#34;:[{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;names\\\u0026#34;,\\\u0026#34;value\\\u0026#34;:[\\\u0026#34;docker20\\\u0026#34;]},{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;process\\\u0026#34;,\\\u0026#34;value\\\u0026#34;:[\\\u0026#34;redis-server\\\u0026#34;]}],\\\u0026#34;scope\\\u0026#34;:\\\u0026#34;node\\\u0026#34;,\\\u0026#34;target\\\u0026#34;:\\\u0026#34;process\\\u0026#34;}]}}\\n\u0026#34; }, \u0026#34;creationTimestamp\u0026#34;: \u0026#34;2020-06-08T06:23:30Z\u0026#34;, \u0026#34;finalizers\u0026#34;: [ \u0026#34;finalizer.chaosblade.io\u0026#34; ], \u0026#34;generation\u0026#34;: 1, \u0026#34;name\u0026#34;: \u0026#34;kill-node-process-by-names\u0026#34;, \u0026#34;resourceVersion\u0026#34;: \u0026#34;1010910\u0026#34;, \u0026#34;selfLink\u0026#34;: \u0026#34;/apis/chaosblade.io/v1alpha1/chaosblades/kill-node-process-by-names\u0026#34;, \u0026#34;uid\u0026#34;: \u0026#34;e6120a54-bfc3-44ab-9225-01b77e0b89d0\u0026#34; }, \u0026#34;spec\u0026#34;: { \u0026#34;experiments\u0026#34;: [ { \u0026#34;action\u0026#34;: \u0026#34;kill\u0026#34;, \u0026#34;desc\u0026#34;: \u0026#34;kill node process by names\u0026#34;, \u0026#34;matchers\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;names\u0026#34;, \u0026#34;value\u0026#34;: [ \u0026#34;docker20\u0026#34; ] }, { \u0026#34;name\u0026#34;: \u0026#34;process\u0026#34;, \u0026#34;value\u0026#34;: [ \u0026#34;redis-server\u0026#34; ] } ], \u0026#34;scope\u0026#34;: \u0026#34;node\u0026#34;, \u0026#34;target\u0026#34;: \u0026#34;process\u0026#34; } ] }, \u0026#34;status\u0026#34;: { \u0026#34;expStatuses\u0026#34;: [ { \u0026#34;action\u0026#34;: \u0026#34;kill\u0026#34;, \u0026#34;resStatuses\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;61921300c4eefa75\u0026#34;, \u0026#34;kind\u0026#34;: \u0026#34;node\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;docker20\u0026#34;, \u0026#34;nodeName\u0026#34;: \u0026#34;docker20\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Success\u0026#34;, \u0026#34;success\u0026#34;: true, \u0026#34;uid\u0026#34;: \u0026#34;51d4553b-8da2-46ab-9b3d-51a11ae6d06f\u0026#34; } ], \u0026#34;scope\u0026#34;: \u0026#34;node\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Success\u0026#34;, \u0026#34;success\u0026#34;: true, \u0026#34;target\u0026#34;: \u0026#34;process\u0026#34; } ], \u0026#34;phase\u0026#34;: \u0026#34;Running\u0026#34; } } 观测结果 # 进入实验 node $ ssh kk@192.168.1.129 # 查看 redis-server 进程号 $ ps -ef | grep redis-server root 31327 31326 0 06:15 ? 00:00:00 redis-server *:6379 # 可以看到进程号发生了变化 $ ps -ef | grep redis-server root 2873 2872 0 06:23 ? 00:00:00 redis-server *:6379 redis-server 的进程号发生改变，说明被杀掉后，又被重新拉起。\n停止实验 执行命令：kubectl delete -f kill_node_process_by_names.yaml\n或者直接删除 blade 资源：kubectl delete blade kill-node-process-by-names\n","excerpt":"此实验会删除指定节点上的 redis-server 进程。\n参数    参数 类型 说明     process string 进程关键词，会在整个命令行中查找   process-cmd …","ref":"/chaosblade-website/docs/operator/node/node-process/kill_node_process/","title":"杀节点上指定进程"},{"body":"指定节点磁盘占用 80%\n参数 节点磁盘填充均支持以下参数。\n   参数 类型 说明 默认值     path string 需要填充的目录 /   size string 需要填充的文件大小，单位是 M，取值是整数，例如 \u0026ndash;size 1024    reserve string 保留磁盘大小，单位是MB。取值是不包含单位的正整数，例如 \u0026ndash;reserve 1024。如果 size、percent、reserve 参数都存在，优先级是 percent \u0026gt; reserve \u0026gt; size    percent string 指定磁盘使用率，取值是不带%号的正整数，例如 \u0026ndash;percent 80    retain-handle  是否保留填充    timeout string 设定运行时长，单位是秒，通用参数     配置文件 实验配置文件：fill_node_disk_by_names.yaml\napiVersion:chaosblade.io/v1alpha1kind:ChaosBlademetadata:name:fill-node-disk-by-namesspec:experiments:- scope:nodetarget:diskaction:filldesc:\u0026#34;node disk fill\u0026#34;matchers:- name:namesvalue:[\u0026#34;docker20\u0026#34;]- name:percentvalue:[\u0026#34;80\u0026#34;]开始实验 选择一个节点，修改 fill_node_disk_by_names.yaml 中的 names 值。\n执行命令，开始实验：\n$ kubectl apply -f fill_node_disk_by_names.yaml 查看实验状态 执行 kubectl get blade fill-node-disk-by-names -o json 命令，查看实验状态：\n{ \u0026#34;apiVersion\u0026#34;: \u0026#34;chaosblade.io/v1alpha1\u0026#34;, \u0026#34;kind\u0026#34;: \u0026#34;ChaosBlade\u0026#34;, \u0026#34;metadata\u0026#34;: { \u0026#34;annotations\u0026#34;: { \u0026#34;kubectl.kubernetes.io/last-applied-configuration\u0026#34;: \u0026#34;{\\\u0026#34;apiVersion\\\u0026#34;:\\\u0026#34;chaosblade.io/v1alpha1\\\u0026#34;,\\\u0026#34;kind\\\u0026#34;:\\\u0026#34;ChaosBlade\\\u0026#34;,\\\u0026#34;metadata\\\u0026#34;:{\\\u0026#34;annotations\\\u0026#34;:{},\\\u0026#34;name\\\u0026#34;:\\\u0026#34;fill-node-disk-by-names\\\u0026#34;},\\\u0026#34;spec\\\u0026#34;:{\\\u0026#34;experiments\\\u0026#34;:[{\\\u0026#34;action\\\u0026#34;:\\\u0026#34;fill\\\u0026#34;,\\\u0026#34;desc\\\u0026#34;:\\\u0026#34;node disk fill\\\u0026#34;,\\\u0026#34;matchers\\\u0026#34;:[{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;names\\\u0026#34;,\\\u0026#34;value\\\u0026#34;:[\\\u0026#34;docker20\\\u0026#34;]},{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;percent\\\u0026#34;,\\\u0026#34;value\\\u0026#34;:[\\\u0026#34;80\\\u0026#34;]}],\\\u0026#34;scope\\\u0026#34;:\\\u0026#34;node\\\u0026#34;,\\\u0026#34;target\\\u0026#34;:\\\u0026#34;disk\\\u0026#34;}]}}\\n\u0026#34; }, \u0026#34;creationTimestamp\u0026#34;: \u0026#34;2020-06-08T03:57:46Z\u0026#34;, \u0026#34;finalizers\u0026#34;: [ \u0026#34;finalizer.chaosblade.io\u0026#34; ], \u0026#34;generation\u0026#34;: 1, \u0026#34;name\u0026#34;: \u0026#34;fill-node-disk-by-names\u0026#34;, \u0026#34;resourceVersion\u0026#34;: \u0026#34;989523\u0026#34;, \u0026#34;selfLink\u0026#34;: \u0026#34;/apis/chaosblade.io/v1alpha1/chaosblades/fill-node-disk-by-names\u0026#34;, \u0026#34;uid\u0026#34;: \u0026#34;7afd5214-47ee-4048-a6ff-34ac6fd45ff3\u0026#34; }, \u0026#34;spec\u0026#34;: { \u0026#34;experiments\u0026#34;: [ { \u0026#34;action\u0026#34;: \u0026#34;fill\u0026#34;, \u0026#34;desc\u0026#34;: \u0026#34;node disk fill\u0026#34;, \u0026#34;matchers\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;names\u0026#34;, \u0026#34;value\u0026#34;: [ \u0026#34;docker20\u0026#34; ] }, { \u0026#34;name\u0026#34;: \u0026#34;percent\u0026#34;, \u0026#34;value\u0026#34;: [ \u0026#34;80\u0026#34; ] } ], \u0026#34;scope\u0026#34;: \u0026#34;node\u0026#34;, \u0026#34;target\u0026#34;: \u0026#34;disk\u0026#34; } ] }, \u0026#34;status\u0026#34;: { \u0026#34;expStatuses\u0026#34;: [ { \u0026#34;action\u0026#34;: \u0026#34;fill\u0026#34;, \u0026#34;resStatuses\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;6c155cf5627c699a\u0026#34;, \u0026#34;kind\u0026#34;: \u0026#34;node\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;docker20\u0026#34;, \u0026#34;nodeName\u0026#34;: \u0026#34;docker20\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Success\u0026#34;, \u0026#34;success\u0026#34;: true, \u0026#34;uid\u0026#34;: \u0026#34;51d4553b-8da2-46ab-9b3d-51a11ae6d06f\u0026#34; } ], \u0026#34;scope\u0026#34;: \u0026#34;node\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Success\u0026#34;, \u0026#34;success\u0026#34;: true, \u0026#34;target\u0026#34;: \u0026#34;disk\u0026#34; } ], \u0026#34;phase\u0026#34;: \u0026#34;Running\u0026#34; } } 观测结果 可以看到磁盘占用 80%。\n# 进入实验 node $ ssh kk@192.168.1.129 # 查看磁盘使用率 $ df -h Filesystem Size Used Avail Use% Mounted on udev 7.9G 0 7.9G 0% /dev tmpfs 1.6G 2.2M 1.6G 1% /run /dev/sda2 98G 73G 20G 79% / tmpfs 7.9G 0 7.9G 0% /dev/shm tmpfs 5.0M 0 5.0M 0% /run/lock tmpfs 7.9G 0 7.9G 0% /sys/fs/cgroup /dev/loop1 90M 90M 0 100% /snap/core/8268 tmpfs 1.6G 0 1.6G 0% /run/user/1000 /dev/loop0 98M 98M 0 100% /snap/core/9289 停止实验 执行命令：kubectl delete -f fill_node_disk_by_names.yaml\n或者直接删除 blade 资源：kubectl delete blade fill-node-disk-by-names\n","excerpt":"指定节点磁盘占用 80%\n参数 节点磁盘填充均支持以下参数。\n   参数 类型 说明 默认值     path string 需要填充的目录 /   size string 需要填充的文件大小， …","ref":"/chaosblade-website/docs/operator/node/node-disk/fill_node_disk/","title":"磁盘填充场景"},{"body":"对 chaosblade 命名空间中，对 redis-master-68857cd57c-hknb6 Pod 中 container id 是 02655dfdd9f0f712a10d63fdc6721f4dcee0a390e37717fff068bf3f85abf85e 的容器的 6379 端口添加 3000 毫秒访问延迟，延迟时间上下浮动 1000 毫秒。\n实验参数    参数 类型 说明     destination-ip string 目标 IP. 支持通过子网掩码来指定一个网段的IP地址, 例如 192.168.1.0/24. 则 192.168.1.0~192.168.1.255 都生效。你也可以指定固定的 IP，如 192.168.1.1 或者 192.168.1.1/32，也可以通过都号分隔多个参数，例如 192.168.1.1,192.168.2.1。   exclude-port string 排除掉的端口，默认会忽略掉通信的对端端口，目的是保留通信可用。可以指定多个，使用逗号分隔或者连接符表示范围，例如 22,8000 或者 8000-8010。 这个参数不能与 \u0026ndash;local-port 或者 \u0026ndash;remote-port 参数一起使用。   exclude-ip string 排除受影响的 IP，支持通过子网掩码来指定一个网段的IP地址, 例如 192.168.1.0/24. 则 192.168.1.0~192.168.1.255 都生效。你也可以指定固定的 IP，如 192.168.1.1 或者 192.168.1.1/32，也可以通过都号分隔多个参数，例如 192.168.1.1,192.168.2.1。   interface string 网卡设备，例如 eth0 (必要参数)。   local-port string 本地端口，一般是本机暴露服务的端口。可以指定多个，使用逗号分隔或者连接符表示范围，例如 80,8000-8080。   offset string 延迟时间上下浮动的值, 单位是毫秒。   remote-port string 远程端口，一般是要访问的外部暴露服务的端口。可以指定多个，使用逗号分隔或者连接符表示范围，例如 80,8000-8080。   time string 延迟时间，单位是毫秒 (必要参数)。   force  强制覆盖已有的 tc 规则，请务必在明确之前的规则可覆盖的情况下使用。   ignore-peer-port  针对添加 \u0026ndash;exclude-port 参数，报 ss 命令找不到的情况下使用，忽略排除端口。   timeout string 设定运行时长，单位是秒，通用参数。    配置文件 实验配置文件：delay_container_network_by_id.yaml：\napiVersion:chaosblade.io/v1alpha1kind:ChaosBlademetadata:name:delay-container-network-by-idspec:experiments:- scope:containertarget:networkaction:delaydesc:\u0026#34;delay container network by container id\u0026#34;matchers:- name:container-idsvalue:- \u0026#34;02655dfdd9f0f712a10d63fdc6721f4dcee0a390e37717fff068bf3f85abf85e\u0026#34;- name:namesvalue:- \u0026#34;redis-master-68857cd57c-hknb6\u0026#34;- name:namespacevalue:- \u0026#34;chaosblade\u0026#34;- name:local-portvalue:[\u0026#34;6379\u0026#34;]- name:interfacevalue:[\u0026#34;eth0\u0026#34;]- name:timevalue:[\u0026#34;3000\u0026#34;]- name:offsetvalue:[\u0026#34;1000\u0026#34;]开始实验 获取 Pod 名称和 container id：\n$ kubectl get pod redis-master-68857cd57c-hknb6 -o custom-columns=POD_NAME:.metadata.name,CONTAINER:.status.containerStatuses[0].name,ID:.status.containerStatuses[0].containerID 修改 delay_container_network_by_id.yaml 中的 container-ids 和 names。\n执行命令，开始实验：\n$ kubectl apply -f delay_container_network_by_id.yaml 查看实验状态 执行 kubectl get blade delay-container-network-by-id -o json 命令，查看实验状态：\n{ \u0026#34;apiVersion\u0026#34;: \u0026#34;chaosblade.io/v1alpha1\u0026#34;, \u0026#34;kind\u0026#34;: \u0026#34;ChaosBlade\u0026#34;, \u0026#34;metadata\u0026#34;: { \u0026#34;annotations\u0026#34;: { \u0026#34;kubectl.kubernetes.io/last-applied-configuration\u0026#34;: \u0026#34;{\\\u0026#34;apiVersion\\\u0026#34;:\\\u0026#34;chaosblade.io/v1alpha1\\\u0026#34;,\\\u0026#34;kind\\\u0026#34;:\\\u0026#34;ChaosBlade\\\u0026#34;,\\\u0026#34;metadata\\\u0026#34;:{\\\u0026#34;annotations\\\u0026#34;:{},\\\u0026#34;name\\\u0026#34;:\\\u0026#34;delay-container-network-by-id\\\u0026#34;},\\\u0026#34;spec\\\u0026#34;:{\\\u0026#34;experiments\\\u0026#34;:[{\\\u0026#34;action\\\u0026#34;:\\\u0026#34;delay\\\u0026#34;,\\\u0026#34;desc\\\u0026#34;:\\\u0026#34;delay container network by container id\\\u0026#34;,\\\u0026#34;matchers\\\u0026#34;:[{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;container-ids\\\u0026#34;,\\\u0026#34;value\\\u0026#34;:[\\\u0026#34;02655dfdd9f0f712a10d63fdc6721f4dcee0a390e37717fff068bf3f85abf85e\\\u0026#34;]},{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;names\\\u0026#34;,\\\u0026#34;value\\\u0026#34;:[\\\u0026#34;redis-master-68857cd57c-hknb6\\\u0026#34;]},{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;namespace\\\u0026#34;,\\\u0026#34;value\\\u0026#34;:[\\\u0026#34;chaosblade\\\u0026#34;]},{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;local-port\\\u0026#34;,\\\u0026#34;value\\\u0026#34;:[\\\u0026#34;6379\\\u0026#34;]},{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;interface\\\u0026#34;,\\\u0026#34;value\\\u0026#34;:[\\\u0026#34;eth0\\\u0026#34;]},{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;time\\\u0026#34;,\\\u0026#34;value\\\u0026#34;:[\\\u0026#34;3000\\\u0026#34;]},{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;offset\\\u0026#34;,\\\u0026#34;value\\\u0026#34;:[\\\u0026#34;1000\\\u0026#34;]}],\\\u0026#34;scope\\\u0026#34;:\\\u0026#34;container\\\u0026#34;,\\\u0026#34;target\\\u0026#34;:\\\u0026#34;network\\\u0026#34;}]}}\\n\u0026#34; }, \u0026#34;creationTimestamp\u0026#34;: \u0026#34;2020-06-04T07:23:55Z\u0026#34;, \u0026#34;finalizers\u0026#34;: [ \u0026#34;finalizer.chaosblade.io\u0026#34; ], \u0026#34;generation\u0026#34;: 1, \u0026#34;name\u0026#34;: \u0026#34;delay-container-network-by-id\u0026#34;, \u0026#34;resourceVersion\u0026#34;: \u0026#34;178235\u0026#34;, \u0026#34;selfLink\u0026#34;: \u0026#34;/apis/chaosblade.io/v1alpha1/chaosblades/delay-container-network-by-id\u0026#34;, \u0026#34;uid\u0026#34;: \u0026#34;d63730e6-4039-49f3-93fb-ba0936bc50ac\u0026#34; }, \u0026#34;spec\u0026#34;: { \u0026#34;experiments\u0026#34;: [ { \u0026#34;action\u0026#34;: \u0026#34;delay\u0026#34;, \u0026#34;desc\u0026#34;: \u0026#34;delay container network by container id\u0026#34;, \u0026#34;matchers\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;container-ids\u0026#34;, \u0026#34;value\u0026#34;: [ \u0026#34;02655dfdd9f0f712a10d63fdc6721f4dcee0a390e37717fff068bf3f85abf85e\u0026#34; ] }, { \u0026#34;name\u0026#34;: \u0026#34;names\u0026#34;, \u0026#34;value\u0026#34;: [ \u0026#34;redis-master-68857cd57c-hknb6\u0026#34; ] }, { \u0026#34;name\u0026#34;: \u0026#34;namespace\u0026#34;, \u0026#34;value\u0026#34;: [ \u0026#34;chaosblade\u0026#34; ] }, { \u0026#34;name\u0026#34;: \u0026#34;local-port\u0026#34;, \u0026#34;value\u0026#34;: [ \u0026#34;6379\u0026#34; ] }, { \u0026#34;name\u0026#34;: \u0026#34;interface\u0026#34;, \u0026#34;value\u0026#34;: [ \u0026#34;eth0\u0026#34; ] }, { \u0026#34;name\u0026#34;: \u0026#34;time\u0026#34;, \u0026#34;value\u0026#34;: [ \u0026#34;3000\u0026#34; ] }, { \u0026#34;name\u0026#34;: \u0026#34;offset\u0026#34;, \u0026#34;value\u0026#34;: [ \u0026#34;1000\u0026#34; ] } ], \u0026#34;scope\u0026#34;: \u0026#34;container\u0026#34;, \u0026#34;target\u0026#34;: \u0026#34;network\u0026#34; } ] }, \u0026#34;status\u0026#34;: { \u0026#34;expStatuses\u0026#34;: [ { \u0026#34;action\u0026#34;: \u0026#34;delay\u0026#34;, \u0026#34;resStatuses\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;91c03ddd172ce1a5\u0026#34;, \u0026#34;kind\u0026#34;: \u0026#34;container\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;redis-master\u0026#34;, \u0026#34;nodeName\u0026#34;: \u0026#34;keking\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Success\u0026#34;, \u0026#34;success\u0026#34;: true, \u0026#34;uid\u0026#34;: \u0026#34;02655dfdd9f0f712a10d63fdc6721f4dcee0a390e37717fff068bf3f85abf85e\u0026#34; } ], \u0026#34;scope\u0026#34;: \u0026#34;container\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Success\u0026#34;, \u0026#34;success\u0026#34;: true, \u0026#34;target\u0026#34;: \u0026#34;network\u0026#34; } ], \u0026#34;phase\u0026#34;: \u0026#34;Running\u0026#34; } } 观测结果 # 获取实验 pod ip $ kubectl get pod -l app=redis,role=master -o jsonpath={.items..status.podIP} 10.42.0.19 # 进入观测 pod $ kubectl exec -it redis-slave-55d8c8ffbd-jd8sm bash # 在 pod 中安装 telnet $ apt-get update \u0026amp;\u0026amp; apt-get install -y telnet # 测试时间 $ time echo \u0026#34;\u0026#34; | telnet 10.42.0.19 6379 Trying 10.42.0.19... Connected to 10.42.0.19. Escape character is \u0026#39;^]\u0026#39;. Connection closed by foreign host. real 0m3.790s user 0m0.007s sys 0m0.001s 可以看到结果符合预期。\n停止实验 执行命令：kubectl delete -f delay_container_network_by_id.yaml\n或者直接删除 blade 资源：kubectl delete blade delay-container-network-by-id\n","excerpt":"对 chaosblade 命名空间中，对 redis-master-68857cd57c-hknb6 Pod 中 container id …","ref":"/chaosblade-website/docs/operator/container/container-network/delay_container_network/","title":"网络延迟场景"},{"body":" 实验前，请先登录 node 节点，使用 ifconfig 命令查看网卡信息，不是所有系统默认的网卡名称都是 eth0。\n docker20 节点的本地 32436 端口添加 3000 毫秒访问延迟，延迟时间上下浮动 1000 毫秒。\n参数    参数 类型 说明     destination-ip string 目标 IP. 支持通过子网掩码来指定一个网段的IP地址, 例如 192.168.1.0/24. 则 192.168.1.0~192.168.1.255 都生效。你也可以指定固定的 IP，如 192.168.1.1 或者 192.168.1.1/32，也可以通过都号分隔多个参数，例如 192.168.1.1,192.168.2.1。   exclude-port string 排除掉的端口，默认会忽略掉通信的对端端口，目的是保留通信可用。可以指定多个，使用逗号分隔或者连接符表示范围，例如 22,8000 或者 8000-8010。 这个参数不能与 \u0026ndash;local-port 或者 \u0026ndash;remote-port 参数一起使用。   exclude-ip string 排除受影响的 IP，支持通过子网掩码来指定一个网段的IP地址, 例如 192.168.1.0/24. 则 192.168.1.0~192.168.1.255 都生效。你也可以指定固定的 IP，如 192.168.1.1 或者 192.168.1.1/32，也可以通过都号分隔多个参数，例如 192.168.1.1,192.168.2.1。   interface string 网卡设备，例如 eth0 (必要参数)。   local-port string 本地端口，一般是本机暴露服务的端口。可以指定多个，使用逗号分隔或者连接符表示范围，例如 80,8000-8080。   offset string 延迟时间上下浮动的值, 单位是毫秒。   remote-port string 远程端口，一般是要访问的外部暴露服务的端口。可以指定多个，使用逗号分隔或者连接符表示范围，例如 80,8000-8080。   time string 延迟时间，单位是毫秒 (必要参数)。   force  强制覆盖已有的 tc 规则，请务必在明确之前的规则可覆盖的情况下使用。   ignore-peer-port  针对添加 \u0026ndash;exclude-port 参数，报 ss 命令找不到的情况下使用，忽略排除端口。   timeout string 设定运行时长，单位是秒，通用参数。    配置文件 实验配置文件：delay_node_network_by_names.yaml\napiVersion:chaosblade.io/v1alpha1kind:ChaosBlademetadata:name:delay-node-network-by-namesspec:experiments:- scope:nodetarget:networkaction:delaydesc:\u0026#34;delay node network loss\u0026#34;matchers:- name:namesvalue:[\u0026#34;docker20\u0026#34;]- name:interfacevalue:[\u0026#34;ens33\u0026#34;]- name:local-portvalue:[\u0026#34;32436\u0026#34;]- name:timevalue:[\u0026#34;3000\u0026#34;]- name:offsetvalue:[\u0026#34;1000\u0026#34;]开始实验 选择一个节点，修改 delay_node_network_by_names.yaml 中的 names 值。\n对 docker20 节点本地端口 32436 访问丢包率 100%。\n执行命令，开始实验：\n$ kubectl apply -f delay_node_network_by_names.yaml 查看实验状态\n执行 kubectl get blade delay-node-network-by-names -o json 命令，查看实验状态：\n{ \u0026#34;apiVersion\u0026#34;: \u0026#34;chaosblade.io/v1alpha1\u0026#34;, \u0026#34;kind\u0026#34;: \u0026#34;ChaosBlade\u0026#34;, \u0026#34;metadata\u0026#34;: { \u0026#34;annotations\u0026#34;: { \u0026#34;kubectl.kubernetes.io/last-applied-configuration\u0026#34;: \u0026#34;{\\\u0026#34;apiVersion\\\u0026#34;:\\\u0026#34;chaosblade.io/v1alpha1\\\u0026#34;,\\\u0026#34;kind\\\u0026#34;:\\\u0026#34;ChaosBlade\\\u0026#34;,\\\u0026#34;metadata\\\u0026#34;:{\\\u0026#34;annotations\\\u0026#34;:{},\\\u0026#34;name\\\u0026#34;:\\\u0026#34;delay-node-network-by-names\\\u0026#34;},\\\u0026#34;spec\\\u0026#34;:{\\\u0026#34;experiments\\\u0026#34;:[{\\\u0026#34;action\\\u0026#34;:\\\u0026#34;delay\\\u0026#34;,\\\u0026#34;desc\\\u0026#34;:\\\u0026#34;delay node network loss\\\u0026#34;,\\\u0026#34;matchers\\\u0026#34;:[{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;names\\\u0026#34;,\\\u0026#34;value\\\u0026#34;:[\\\u0026#34;docker20\\\u0026#34;]},{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;interface\\\u0026#34;,\\\u0026#34;value\\\u0026#34;:[\\\u0026#34;ens33\\\u0026#34;]},{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;local-port\\\u0026#34;,\\\u0026#34;value\\\u0026#34;:[\\\u0026#34;32436\\\u0026#34;]},{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;time\\\u0026#34;,\\\u0026#34;value\\\u0026#34;:[\\\u0026#34;3000\\\u0026#34;]},{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;offset\\\u0026#34;,\\\u0026#34;value\\\u0026#34;:[\\\u0026#34;1000\\\u0026#34;]}],\\\u0026#34;scope\\\u0026#34;:\\\u0026#34;node\\\u0026#34;,\\\u0026#34;target\\\u0026#34;:\\\u0026#34;network\\\u0026#34;}]}}\\n\u0026#34; }, \u0026#34;creationTimestamp\u0026#34;: \u0026#34;2020-06-08T03:28:30Z\u0026#34;, \u0026#34;finalizers\u0026#34;: [ \u0026#34;finalizer.chaosblade.io\u0026#34; ], \u0026#34;generation\u0026#34;: 1, \u0026#34;name\u0026#34;: \u0026#34;delay-node-network-by-names\u0026#34;, \u0026#34;resourceVersion\u0026#34;: \u0026#34;985238\u0026#34;, \u0026#34;selfLink\u0026#34;: \u0026#34;/apis/chaosblade.io/v1alpha1/chaosblades/delay-node-network-by-names\u0026#34;, \u0026#34;uid\u0026#34;: \u0026#34;d6cf9ba1-56e3-474c-89f3-1df89696c250\u0026#34; }, \u0026#34;spec\u0026#34;: { \u0026#34;experiments\u0026#34;: [ { \u0026#34;action\u0026#34;: \u0026#34;delay\u0026#34;, \u0026#34;desc\u0026#34;: \u0026#34;delay node network loss\u0026#34;, \u0026#34;matchers\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;names\u0026#34;, \u0026#34;value\u0026#34;: [ \u0026#34;docker20\u0026#34; ] }, { \u0026#34;name\u0026#34;: \u0026#34;interface\u0026#34;, \u0026#34;value\u0026#34;: [ \u0026#34;ens33\u0026#34; ] }, { \u0026#34;name\u0026#34;: \u0026#34;local-port\u0026#34;, \u0026#34;value\u0026#34;: [ \u0026#34;32436\u0026#34; ] }, { \u0026#34;name\u0026#34;: \u0026#34;time\u0026#34;, \u0026#34;value\u0026#34;: [ \u0026#34;3000\u0026#34; ] }, { \u0026#34;name\u0026#34;: \u0026#34;offset\u0026#34;, \u0026#34;value\u0026#34;: [ \u0026#34;1000\u0026#34; ] } ], \u0026#34;scope\u0026#34;: \u0026#34;node\u0026#34;, \u0026#34;target\u0026#34;: \u0026#34;network\u0026#34; } ] }, \u0026#34;status\u0026#34;: { \u0026#34;expStatuses\u0026#34;: [ { \u0026#34;action\u0026#34;: \u0026#34;delay\u0026#34;, \u0026#34;resStatuses\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;33c2ed6fec6fe8cc\u0026#34;, \u0026#34;kind\u0026#34;: \u0026#34;node\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;docker20\u0026#34;, \u0026#34;nodeName\u0026#34;: \u0026#34;docker20\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Success\u0026#34;, \u0026#34;success\u0026#34;: true, \u0026#34;uid\u0026#34;: \u0026#34;51d4553b-8da2-46ab-9b3d-51a11ae6d06f\u0026#34; } ], \u0026#34;scope\u0026#34;: \u0026#34;node\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Success\u0026#34;, \u0026#34;success\u0026#34;: true, \u0026#34;target\u0026#34;: \u0026#34;network\u0026#34; } ], \u0026#34;phase\u0026#34;: \u0026#34;Running\u0026#34; } } 观测结果 # 从实验节点访问 Guestbook $ time echo \u0026#34;\u0026#34; | telnet 192.168.1.129 32436 Trying 192.168.1.129... Connected to 192.168.1.129. Escape character is \u0026#39;^]\u0026#39;. Connection closed by foreign host. echo \u0026#34;\u0026#34; 0.00s user 0.00s system 35% cpu 0.003 total telnet 192.168.1.129 32436 0.01s user 0.00s system 0% cpu 3.248 total 停止实验 执行命令：kubectl delete -f delay_node_network_by_names.yaml\n或者直接删除 blade 资源：kubectl delete blade delay-node-network-by-names\n","excerpt":"实验前，请先登录 node 节点，使用 ifconfig 命令查看网卡信息，不是所有系统默认的网卡名称都是 eth0。\n docker20 节点的本地 32436 端口添加 3000 毫秒访问延迟，延 …","ref":"/chaosblade-website/docs/operator/node/node-network/delay_node_network/","title":"网络延迟场景"},{"body":"在 chaosblade 命名空间中，对 redis-master-68857cd57c-dzbs9 Pod 的本地 6379 端口添加 3000 毫秒访问延迟，延迟时间上下浮动 1000 毫秒。\n参数    参数 类型 说明     destination-ip string 目标 IP. 支持通过子网掩码来指定一个网段的IP地址, 例如 192.168.1.0/24. 则 192.168.1.0~192.168.1.255 都生效。你也可以指定固定的 IP，如 192.168.1.1 或者 192.168.1.1/32，也可以通过都号分隔多个参数，例如 192.168.1.1,192.168.2.1。   exclude-port string 排除掉的端口，默认会忽略掉通信的对端端口，目的是保留通信可用。可以指定多个，使用逗号分隔或者连接符表示范围，例如 22,8000 或者 8000-8010。 这个参数不能与 \u0026ndash;local-port 或者 \u0026ndash;remote-port 参数一起使用。   exclude-ip string 排除受影响的 IP，支持通过子网掩码来指定一个网段的IP地址, 例如 192.168.1.0/24. 则 192.168.1.0~192.168.1.255 都生效。你也可以指定固定的 IP，如 192.168.1.1 或者 192.168.1.1/32，也可以通过都号分隔多个参数，例如 192.168.1.1,192.168.2.1。   interface string 网卡设备，例如 eth0 (必要参数)。   local-port string 本地端口，一般是本机暴露服务的端口。可以指定多个，使用逗号分隔或者连接符表示范围，例如 80,8000-8080。   offset string 延迟时间上下浮动的值, 单位是毫秒。   remote-port string 远程端口，一般是要访问的外部暴露服务的端口。可以指定多个，使用逗号分隔或者连接符表示范围，例如 80,8000-8080。   time string 延迟时间，单位是毫秒 (必要参数)。   force  强制覆盖已有的 tc 规则，请务必在明确之前的规则可覆盖的情况下使用。   ignore-peer-port  针对添加 \u0026ndash;exclude-port 参数，报 ss 命令找不到的情况下使用，忽略排除端口。   timeout string 设定运行时长，单位是秒，通用参数。    配置文件 实验配置文件：delay_pod_network_by_names.yaml\napiVersion:chaosblade.io/v1alpha1kind:ChaosBlademetadata:name:delay-pod-network-by-namesspec:experiments:- scope:podtarget:networkaction:delaydesc:\u0026#34;delay pod network by names\u0026#34;matchers:- name:namesvalue:- \u0026#34;redis-master-68857cd57c-dzbs9\u0026#34;- name:namespacevalue:- \u0026#34;chaosblade\u0026#34;- name:local-portvalue:[\u0026#34;6379\u0026#34;]- name:interfacevalue:[\u0026#34;eth0\u0026#34;]- name:timevalue:[\u0026#34;3000\u0026#34;]- name:offsetvalue:[\u0026#34;1000\u0026#34;]开始实验 获取 Pod 名称：\n$ kubectl get pod -l app=redis,role=master -o jsonpath={.items..metadata.name} 修改 delay_pod_network_by_names.yaml 中的 spec-\u0026gt;experiments-\u0026gt;scope-\u0026gt;matchers-\u0026gt;name-\u0026gt;value\n执行命令，开始实验：\n$ kubectl apply -f delay_pod_network_by_names.yaml 查看实验状态 执行 kubectl get blade delay-pod-network-by-names -o json 命令，查看实验状态：\n{ \u0026#34;apiVersion\u0026#34;: \u0026#34;chaosblade.io/v1alpha1\u0026#34;, \u0026#34;kind\u0026#34;: \u0026#34;ChaosBlade\u0026#34;, \u0026#34;metadata\u0026#34;: { \u0026#34;annotations\u0026#34;: { \u0026#34;kubectl.kubernetes.io/last-applied-configuration\u0026#34;: \u0026#34;{\\\u0026#34;apiVersion\\\u0026#34;:\\\u0026#34;chaosblade.io/v1alpha1\\\u0026#34;,\\\u0026#34;kind\\\u0026#34;:\\\u0026#34;ChaosBlade\\\u0026#34;,\\\u0026#34;metadata\\\u0026#34;:{\\\u0026#34;annotations\\\u0026#34;:{},\\\u0026#34;name\\\u0026#34;:\\\u0026#34;delay-pod-network-by-names\\\u0026#34;},\\\u0026#34;spec\\\u0026#34;:{\\\u0026#34;experiments\\\u0026#34;:[{\\\u0026#34;action\\\u0026#34;:\\\u0026#34;delay\\\u0026#34;,\\\u0026#34;desc\\\u0026#34;:\\\u0026#34;delay pod network by names\\\u0026#34;,\\\u0026#34;matchers\\\u0026#34;:[{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;names\\\u0026#34;,\\\u0026#34;value\\\u0026#34;:[\\\u0026#34;redis-master-68857cd57c-dzbs9\\\u0026#34;]},{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;namespace\\\u0026#34;,\\\u0026#34;value\\\u0026#34;:[\\\u0026#34;chaosblade\\\u0026#34;]},{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;local-port\\\u0026#34;,\\\u0026#34;value\\\u0026#34;:[\\\u0026#34;6379\\\u0026#34;]},{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;interface\\\u0026#34;,\\\u0026#34;value\\\u0026#34;:[\\\u0026#34;eth0\\\u0026#34;]},{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;time\\\u0026#34;,\\\u0026#34;value\\\u0026#34;:[\\\u0026#34;3000\\\u0026#34;]},{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;offset\\\u0026#34;,\\\u0026#34;value\\\u0026#34;:[\\\u0026#34;1000\\\u0026#34;]}],\\\u0026#34;scope\\\u0026#34;:\\\u0026#34;pod\\\u0026#34;,\\\u0026#34;target\\\u0026#34;:\\\u0026#34;network\\\u0026#34;}]}}\\n\u0026#34; }, \u0026#34;creationTimestamp\u0026#34;: \u0026#34;2020-06-02T05:57:50Z\u0026#34;, \u0026#34;finalizers\u0026#34;: [ \u0026#34;finalizer.chaosblade.io\u0026#34; ], \u0026#34;generation\u0026#34;: 1, \u0026#34;name\u0026#34;: \u0026#34;delay-pod-network-by-names\u0026#34;, \u0026#34;resourceVersion\u0026#34;: \u0026#34;7710394\u0026#34;, \u0026#34;selfLink\u0026#34;: \u0026#34;/apis/chaosblade.io/v1alpha1/chaosblades/delay-pod-network-by-names\u0026#34;, \u0026#34;uid\u0026#34;: \u0026#34;1235ff55-8256-4caa-a371-e1abf6c9e7b7\u0026#34; }, \u0026#34;spec\u0026#34;: { \u0026#34;experiments\u0026#34;: [ { \u0026#34;action\u0026#34;: \u0026#34;delay\u0026#34;, \u0026#34;desc\u0026#34;: \u0026#34;delay pod network by names\u0026#34;, \u0026#34;matchers\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;names\u0026#34;, \u0026#34;value\u0026#34;: [ \u0026#34;redis-master-68857cd57c-dzbs9\u0026#34; ] }, { \u0026#34;name\u0026#34;: \u0026#34;namespace\u0026#34;, \u0026#34;value\u0026#34;: [ \u0026#34;chaosblade\u0026#34; ] }, { \u0026#34;name\u0026#34;: \u0026#34;local-port\u0026#34;, \u0026#34;value\u0026#34;: [ \u0026#34;6379\u0026#34; ] }, { \u0026#34;name\u0026#34;: \u0026#34;interface\u0026#34;, \u0026#34;value\u0026#34;: [ \u0026#34;eth0\u0026#34; ] }, { \u0026#34;name\u0026#34;: \u0026#34;time\u0026#34;, \u0026#34;value\u0026#34;: [ \u0026#34;3000\u0026#34; ] }, { \u0026#34;name\u0026#34;: \u0026#34;offset\u0026#34;, \u0026#34;value\u0026#34;: [ \u0026#34;1000\u0026#34; ] } ], \u0026#34;scope\u0026#34;: \u0026#34;pod\u0026#34;, \u0026#34;target\u0026#34;: \u0026#34;network\u0026#34; } ] }, \u0026#34;status\u0026#34;: { \u0026#34;expStatuses\u0026#34;: [ { \u0026#34;action\u0026#34;: \u0026#34;delay\u0026#34;, \u0026#34;resStatuses\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;a86f8cf8b68ace98\u0026#34;, \u0026#34;kind\u0026#34;: \u0026#34;pod\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;redis-master\u0026#34;, \u0026#34;nodeName\u0026#34;: \u0026#34;keking\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Success\u0026#34;, \u0026#34;success\u0026#34;: true, \u0026#34;uid\u0026#34;: \u0026#34;619a19ceb213f9b6152159bd868e88de2ddbf9a8aac606dc274b34bec6510c60\u0026#34; } ], \u0026#34;scope\u0026#34;: \u0026#34;pod\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Success\u0026#34;, \u0026#34;success\u0026#34;: true, \u0026#34;target\u0026#34;: \u0026#34;network\u0026#34; } ], \u0026#34;phase\u0026#34;: \u0026#34;Running\u0026#34; } } 观测结果 # 获取实验 pod ip $ kubectl get pod -l app=redis,role=master -o jsonpath={.items..status.podIP} 10.42.69.44 # 进入观测 pod $ kubectl exec -it redis-slave-6dd975d4c8-2zrkb bash # 在 pod 中安装 telnet $ apt-get update \u0026amp;\u0026amp; apt-get install -y telnet # 测试时间 $ time echo \u0026#34;\u0026#34; | telnet 10.42.69.44 6379 Trying 10.42.69.44... Connected to 10.42.69.44. Escape character is \u0026#39;^]\u0026#39;. Connection closed by foreign host. real 0m3.790s user 0m0.007s sys 0m0.001s 可以看到结果符合预期。\n停止实验 执行命令：kubectl delete -f delay_pod_network_by_names.yaml\n或者直接删除 blade 资源：kubectl delete blade delay-pod-network-by-names\n","excerpt":"在 chaosblade 命名空间中，对 redis-master-68857cd57c-dzbs9 Pod 的本地 6379 端口添加 3000 毫秒访问延迟，延迟时间上下浮动 1000 毫秒。\n参 …","ref":"/chaosblade-website/docs/operator/pod/pod-network/delay_pod_network/","title":"网络延迟场景"},{"body":"指定 chaosblade 命名空间下 Pod 名为 guestbook-7b87b7459f-cqkq2，container id 为 2ff814b246f86，使其 CPU 负载为 100%。\n实验准备 由于使用 helm 安装的 guestbook 没有对资源进行限制，进行负载实验的话，会导致整个节点的故障，所以在实验之前需要对资源进行限制。\n$ kubectl patch deployment redis-slave --patch \u0026#39;{\u0026#34;spec\u0026#34;: {\u0026#34;template\u0026#34;: {\u0026#34;spec\u0026#34;: {\u0026#34;containers\u0026#34;: [{\u0026#34;name\u0026#34;: \u0026#34;redis-slave\u0026#34;,\u0026#34;resources\u0026#34;: {\u0026#34;limits\u0026#34;:{\u0026#34;cpu\u0026#34;:\u0026#34;300m\u0026#34;,\u0026#34;memory\u0026#34;:\u0026#34;512Mi\u0026#34;} }}]}}}}\u0026#39; 配置文件 实验配置文件：increase_container_cpu_load_by_id.yaml\napiVersion:chaosblade.io/v1alpha1kind:ChaosBlademetadata:name:increase-container-cpu-load-by-idspec:experiments:- scope:containertarget:cpuaction:fullloaddesc:\u0026#34;increase container cpu load by id\u0026#34;matchers:- name:container-idsvalue:- \u0026#34;5ad91eb49c1c6f8357e8d455fd27dad5d0c01c5cc3df36a3acdb1abc75f68a11\u0026#34;- name:cpu-percentvalue:[\u0026#34;100\u0026#34;]# pod names- name:namesvalue:[\u0026#34;redis-slave-55d8c8ffbd-jd8sm\u0026#34;]- name:namespacevalue:[\u0026#34;chaosblade\u0026#34;]开始实验 获取 container 名称：\n$ kubectl get pod redis-slave-55d8c8ffbd-jd8sm -o custom-columns=CONTAINER:.status.containerStatuses[0].name,ID:.status.containerStatuses[0].containerID 修改 increase_container_cpu_load_by_id.yaml 中的 container-ids 和 names。\n查看实验状态 执行命令：kubectl get blade increase-container-cpu-load-by-id -o json，查看实验状态：\n{ \u0026#34;apiVersion\u0026#34;: \u0026#34;chaosblade.io/v1alpha1\u0026#34;, \u0026#34;kind\u0026#34;: \u0026#34;ChaosBlade\u0026#34;, \u0026#34;metadata\u0026#34;: { \u0026#34;annotations\u0026#34;: { \u0026#34;kubectl.kubernetes.io/last-applied-configuration\u0026#34;: \u0026#34;{\\\u0026#34;apiVersion\\\u0026#34;:\\\u0026#34;chaosblade.io/v1alpha1\\\u0026#34;,\\\u0026#34;kind\\\u0026#34;:\\\u0026#34;ChaosBlade\\\u0026#34;,\\\u0026#34;metadata\\\u0026#34;:{\\\u0026#34;annotations\\\u0026#34;:{},\\\u0026#34;name\\\u0026#34;:\\\u0026#34;increase-container-cpu-load-by-id-new\\\u0026#34;},\\\u0026#34;spec\\\u0026#34;:{\\\u0026#34;experiments\\\u0026#34;:[{\\\u0026#34;action\\\u0026#34;:\\\u0026#34;fullload\\\u0026#34;,\\\u0026#34;desc\\\u0026#34;:\\\u0026#34;increase container cpu load by id\\\u0026#34;,\\\u0026#34;matchers\\\u0026#34;:[{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;container-ids\\\u0026#34;,\\\u0026#34;value\\\u0026#34;:[\\\u0026#34;5ad91eb49c1c6f8357e8d455fd27dad5d0c01c5cc3df36a3acdb1abc75f68a11\\\u0026#34;]},{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;cpu-percent\\\u0026#34;,\\\u0026#34;value\\\u0026#34;:[\\\u0026#34;100\\\u0026#34;]},{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;names\\\u0026#34;,\\\u0026#34;value\\\u0026#34;:[\\\u0026#34;redis-slave-55d8c8ffbd-jd8sm\\\u0026#34;]},{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;namespace\\\u0026#34;,\\\u0026#34;value\\\u0026#34;:[\\\u0026#34;chaosblade\\\u0026#34;]}],\\\u0026#34;scope\\\u0026#34;:\\\u0026#34;container\\\u0026#34;,\\\u0026#34;target\\\u0026#34;:\\\u0026#34;cpu\\\u0026#34;}]}}\\n\u0026#34; }, \u0026#34;creationTimestamp\u0026#34;: \u0026#34;2020-06-04T06:26:44Z\u0026#34;, \u0026#34;deletionGracePeriodSeconds\u0026#34;: 0, \u0026#34;deletionTimestamp\u0026#34;: \u0026#34;2020-06-04T06:28:48Z\u0026#34;, \u0026#34;finalizers\u0026#34;: [ \u0026#34;finalizer.chaosblade.io\u0026#34; ], \u0026#34;generation\u0026#34;: 2, \u0026#34;name\u0026#34;: \u0026#34;increase-container-cpu-load-by-id-new\u0026#34;, \u0026#34;resourceVersion\u0026#34;: \u0026#34;170473\u0026#34;, \u0026#34;selfLink\u0026#34;: \u0026#34;/apis/chaosblade.io/v1alpha1/chaosblades/increase-container-cpu-load-by-id-new\u0026#34;, \u0026#34;uid\u0026#34;: \u0026#34;51955fd7-a6af-403a-915d-dd25bea73699\u0026#34; }, \u0026#34;spec\u0026#34;: { \u0026#34;experiments\u0026#34;: [ { \u0026#34;action\u0026#34;: \u0026#34;fullload\u0026#34;, \u0026#34;desc\u0026#34;: \u0026#34;increase container cpu load by id\u0026#34;, \u0026#34;matchers\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;container-ids\u0026#34;, \u0026#34;value\u0026#34;: [ \u0026#34;5ad91eb49c1c6f8357e8d455fd27dad5d0c01c5cc3df36a3acdb1abc75f68a11\u0026#34; ] }, { \u0026#34;name\u0026#34;: \u0026#34;cpu-percent\u0026#34;, \u0026#34;value\u0026#34;: [ \u0026#34;100\u0026#34; ] }, { \u0026#34;name\u0026#34;: \u0026#34;names\u0026#34;, \u0026#34;value\u0026#34;: [ \u0026#34;redis-slave-55d8c8ffbd-jd8sm\u0026#34; ] }, { \u0026#34;name\u0026#34;: \u0026#34;namespace\u0026#34;, \u0026#34;value\u0026#34;: [ \u0026#34;chaosblade\u0026#34; ] } ], \u0026#34;scope\u0026#34;: \u0026#34;container\u0026#34;, \u0026#34;target\u0026#34;: \u0026#34;cpu\u0026#34; } ] }, \u0026#34;status\u0026#34;: { \u0026#34;expStatuses\u0026#34;: [ { \u0026#34;action\u0026#34;: \u0026#34;fullload\u0026#34;, \u0026#34;resStatuses\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;28a075b31562ba6f\u0026#34;, \u0026#34;kind\u0026#34;: \u0026#34;container\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;redis-slave\u0026#34;, \u0026#34;nodeName\u0026#34;: \u0026#34;keking\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Success\u0026#34;, \u0026#34;success\u0026#34;: true, \u0026#34;uid\u0026#34;: \u0026#34;5ad91eb49c1c6f8357e8d455fd27dad5d0c01c5cc3df36a3acdb1abc75f68a11\u0026#34; } ], \u0026#34;scope\u0026#34;: \u0026#34;container\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Success\u0026#34;, \u0026#34;success\u0026#34;: true, \u0026#34;target\u0026#34;: \u0026#34;cpu\u0026#34; } ], \u0026#34;phase\u0026#34;: \u0026#34;Running\u0026#34; } } 观测结果 可从监控系统观测到结果\n停止实验 执行命令：kubectl delete -f increase_container_cpu_load_by_id.yaml\n或者直接删除 blade 资源：kubectl delete blade increase-container-cpu-load-by-id\n","excerpt":"指定 chaosblade 命名空间下 Pod 名为 guestbook-7b87b7459f-cqkq2，container id 为 2ff814b246f86，使其 CPU 负载为 100%。\n …","ref":"/chaosblade-website/docs/operator/container/container-resource/cpu-load/","title":"Container 内 CPU 负载场景"},{"body":"","excerpt":"","ref":"/chaosblade-website/docs/operator/container/container-network/","title":"Container 内网络实验场景"},{"body":"","excerpt":"","ref":"/chaosblade-website/docs/binaries/destroy/","title":"destroy 命令"},{"body":"","excerpt":"","ref":"/chaosblade-website/docs/operator/node/node-network/","title":"Node 网络相关场景"},{"body":" 值得注意的是：在实验途中，如果被实验的 Pod 被删除了，则会导致实验销毁失败，实验无法被销毁。这样设计的目的是为了在销毁失败的实验时，用户需要去检查是否真正的需要销毁。确认无误后，可以强制销毁该实验，详见 https://github.com/chaosblade-io/chaosblade/issues/368。\n 参数\nPod 资源均支持以下参数。\n   参数 类型 说明 默认值     namespace string Pod 所属的命名空间 default   evict-count string 限制实验生效的数量    evict-percent string 限制实验生效数量的百分比，不包含 %    labels string Pod 资源标签，多个标签之间是或的关系    names string Pod 资源名    waiting-time string 实验结果等待时间，参数值要包含单位，例如 10s，1m 20s    ","excerpt":" 值得注意的是：在实验途中，如果被实验的 Pod 被删除了，则会导致实验销毁失败，实验无法被销毁。这样设计的目的是为了在销毁失败的实验时，用户需要去检查是否真正的需要销毁。确认无误后，可以强制销毁该实 …","ref":"/chaosblade-website/docs/operator/pod/","title":"Pod 场景"},{"body":"","excerpt":"","ref":"/chaosblade-website/docs/operator/pod/pod-network/","title":"Pod 网络相关场景"},{"body":"编译 此项目采用 golang 语言编写，所以需要先安装最新的 golang 版本，最低支持的版本是 1.11。Clone 工程后进入项目目录执行以下命令进行编译：\nmake 如果在 mac 系统上，编译当前系统的版本，请执行：\nmake build_darwin 如果想在 mac 系统上，编译 linux 系统版本，请执行：\nmake build_linux 也可以选择性编译，比如只需要编译 cli、os 场景，则执行：\nmake build_with cli os # 如果是 mac 系统，执行 make build_with cli os_darwin # 如果是 mac 系统，想选择性的编译 linux 版本的 cli，os，则执行： ARGS=\u0026#34;cli os\u0026#34; make build_with_linux ","excerpt":"编译 此项目采用 golang 语言编写，所以需要先安装最新的 golang 版本，最低支持的版本是 1.11。Clone 工程后进入项目目录执行以下命令进行编译：\nmake 如果在 mac 系统上， …","ref":"/chaosblade-website/contributing/dev/","title":"开发者人员指南"},{"body":"如果想不下载 chaosblade 工具包，快速体验 chaosblade，可以拉取 docker 镜像并运行，在容器内体验。\n操作步骤如下： 下载镜像：\ndocker pull chaosbladeio/chaosblade-demo 启动镜像：\ndocker run -it --privileged chaosbladeio/chaosblade-demo 进入镜像之后，可阅读 README.txt 文件实施混沌实验，Enjoy it。\n","excerpt":"如果想不下载 chaosblade 工具包，快速体验 chaosblade，可以拉取 docker 镜像并运行，在容器内体验。\n操作步骤如下： 下载镜像：\ndocker pull …","ref":"/chaosblade-website/docs/quickstart/demo/","title":"快速体验"},{"body":"此实验会挂起指定容器中的 redis-server 进程。\n参数    参数 类型 说明     process string 进程关键词，会在整个命令行中查找   process-cmd string 进程命令，只会在命令中查找   timeout string 设定运行时长，单位是秒，通用参数    配置文件 实验配置文件：stop_container_process_by_names.yaml\napiVersion:chaosblade.io/v1alpha1kind:ChaosBlademetadata:name:stop-container-process-by-idspec:experiments:- scope:containertarget:processaction:stopdesc:\u0026#34;kill container process by id\u0026#34;matchers:- name:container-idsvalue:- \u0026#34;bfc9ca01fac33f60d300485f96549644b634f274351df1d4897526451f49e3fb\u0026#34;- name:processvalue:[\u0026#34;redis-server\u0026#34;]- name:namesvalue:[\u0026#34;redis-slave-55d8c8ffbd-4pz8m\u0026#34;]- name:namespacevalue:[\u0026#34;chaosblade\u0026#34;]开始实验 选择一个节点，修改 stop_container_process_by_names.yaml 中的 names 值。\n执行命令，开始实验：\n$ kubectl apply -f stop_container_process_by_names.yaml 查看实验状态 执行 kubectl get blade stop-container-process-by-names -o json 命令，查看实验状态：\n{ \u0026#34;apiVersion\u0026#34;: \u0026#34;chaosblade.io/v1alpha1\u0026#34;, \u0026#34;kind\u0026#34;: \u0026#34;ChaosBlade\u0026#34;, \u0026#34;metadata\u0026#34;: { \u0026#34;annotations\u0026#34;: { \u0026#34;kubectl.kubernetes.io/last-applied-configuration\u0026#34;: \u0026#34;{\\\u0026#34;apiVersion\\\u0026#34;:\\\u0026#34;chaosblade.io/v1alpha1\\\u0026#34;,\\\u0026#34;kind\\\u0026#34;:\\\u0026#34;ChaosBlade\\\u0026#34;,\\\u0026#34;metadata\\\u0026#34;:{\\\u0026#34;annotations\\\u0026#34;:{},\\\u0026#34;name\\\u0026#34;:\\\u0026#34;kill-container-process-by-id\\\u0026#34;},\\\u0026#34;spec\\\u0026#34;:{\\\u0026#34;experiments\\\u0026#34;:[{\\\u0026#34;action\\\u0026#34;:\\\u0026#34;stop\\\u0026#34;,\\\u0026#34;desc\\\u0026#34;:\\\u0026#34;kill container process by id\\\u0026#34;,\\\u0026#34;matchers\\\u0026#34;:[{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;container-ids\\\u0026#34;,\\\u0026#34;value\\\u0026#34;:[\\\u0026#34;bfc9ca01fac33f60d300485f96549644b634f274351df1d4897526451f49e3fb\\\u0026#34;]},{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;process\\\u0026#34;,\\\u0026#34;value\\\u0026#34;:[\\\u0026#34;redis-server\\\u0026#34;]},{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;names\\\u0026#34;,\\\u0026#34;value\\\u0026#34;:[\\\u0026#34;redis-slave-55d8c8ffbd-4pz8m\\\u0026#34;]},{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;namespace\\\u0026#34;,\\\u0026#34;value\\\u0026#34;:[\\\u0026#34;chaosblade\\\u0026#34;]}],\\\u0026#34;scope\\\u0026#34;:\\\u0026#34;container\\\u0026#34;,\\\u0026#34;target\\\u0026#34;:\\\u0026#34;process\\\u0026#34;}]}}\\n\u0026#34; }, \u0026#34;creationTimestamp\u0026#34;: \u0026#34;2020-06-08T08:42:21Z\u0026#34;, \u0026#34;finalizers\u0026#34;: [ \u0026#34;finalizer.chaosblade.io\u0026#34; ], \u0026#34;generation\u0026#34;: 1, \u0026#34;name\u0026#34;: \u0026#34;kill-container-process-by-id\u0026#34;, \u0026#34;resourceVersion\u0026#34;: \u0026#34;1031383\u0026#34;, \u0026#34;selfLink\u0026#34;: \u0026#34;/apis/chaosblade.io/v1alpha1/chaosblades/kill-container-process-by-id\u0026#34;, \u0026#34;uid\u0026#34;: \u0026#34;39c45a2f-d0d1-4d01-affe-078ca08e9f82\u0026#34; }, \u0026#34;spec\u0026#34;: { \u0026#34;experiments\u0026#34;: [ { \u0026#34;action\u0026#34;: \u0026#34;stop\u0026#34;, \u0026#34;desc\u0026#34;: \u0026#34;kill container process by id\u0026#34;, \u0026#34;matchers\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;container-ids\u0026#34;, \u0026#34;value\u0026#34;: [ \u0026#34;bfc9ca01fac33f60d300485f96549644b634f274351df1d4897526451f49e3fb\u0026#34; ] }, { \u0026#34;name\u0026#34;: \u0026#34;process\u0026#34;, \u0026#34;value\u0026#34;: [ \u0026#34;redis-server\u0026#34; ] }, { \u0026#34;name\u0026#34;: \u0026#34;names\u0026#34;, \u0026#34;value\u0026#34;: [ \u0026#34;redis-slave-55d8c8ffbd-4pz8m\u0026#34; ] }, { \u0026#34;name\u0026#34;: \u0026#34;namespace\u0026#34;, \u0026#34;value\u0026#34;: [ \u0026#34;chaosblade\u0026#34; ] } ], \u0026#34;scope\u0026#34;: \u0026#34;container\u0026#34;, \u0026#34;target\u0026#34;: \u0026#34;process\u0026#34; } ] }, \u0026#34;status\u0026#34;: { \u0026#34;expStatuses\u0026#34;: [ { \u0026#34;action\u0026#34;: \u0026#34;stop\u0026#34;, \u0026#34;resStatuses\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;19f8d915dce8c254\u0026#34;, \u0026#34;kind\u0026#34;: \u0026#34;container\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;redis-slave\u0026#34;, \u0026#34;nodeName\u0026#34;: \u0026#34;docker20\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Success\u0026#34;, \u0026#34;success\u0026#34;: true, \u0026#34;uid\u0026#34;: \u0026#34;bfc9ca01fac33f60d300485f96549644b634f274351df1d4897526451f49e3fb\u0026#34; } ], \u0026#34;scope\u0026#34;: \u0026#34;container\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Success\u0026#34;, \u0026#34;success\u0026#34;: true, \u0026#34;target\u0026#34;: \u0026#34;process\u0026#34; } ], \u0026#34;phase\u0026#34;: \u0026#34;Running\u0026#34; } } 观测结果 # 进入实验 pod $ kubectl exec -it redis-slave-55d8c8ffbd-4pz8m bash # 查看 redis-server 进程号 $ ps aux| grep redis-server root 5632 0.0 0.0 41520 4168 ? Tl 06:28 0:06 redis-server *:6379 可以看到 redis-server 此刻进程处于暂停状态了（T）。\n停止实验 执行命令：kubectl delete -f stop_container_process_by_names.yaml\n或者直接删除 blade 资源：kubectl delete blade stop-container-process-by-names\n","excerpt":"此实验会挂起指定容器中的 redis-server 进程。\n参数    参数 类型 说明     process string 进程关键词，会在整个命令行中查找   process-cmd …","ref":"/chaosblade-website/docs/operator/container/container-process/stop_container_process/","title":"挂起指定进程场景"},{"body":"此实验会挂起指定节点上的 redis-server 进程。\n参数    参数 类型 说明     process string 进程关键词，会在整个命令行中查找   process-cmd string 进程命令，只会在命令中查找   timeout string 设定运行时长，单位是秒，通用参数    配置文件 实验配置文件：stop_node_process_by_names.yaml\napiVersion:chaosblade.io/v1alpha1kind:ChaosBlademetadata:name:stop-node-process-by-namesspec:experiments:- scope:nodetarget:processaction:stopdesc:\u0026#34;kill node process by names\u0026#34;matchers:- name:namesvalue:[\u0026#34;docker20\u0026#34;]- name:processvalue:[\u0026#34;redis-server\u0026#34;]开始实验 选择一个节点，修改 stop_node_process_by_names.yaml 中的 names 值。\n执行命令，开始实验：\n$ kubectl apply -f stop_node_process_by_names.yaml 查看实验状态 执行 kubectl get blade stop-node-process-by-names -o json 命令，查看实验状态：\n{ \u0026#34;apiVersion\u0026#34;: \u0026#34;chaosblade.io/v1alpha1\u0026#34;, \u0026#34;kind\u0026#34;: \u0026#34;ChaosBlade\u0026#34;, \u0026#34;metadata\u0026#34;: { \u0026#34;annotations\u0026#34;: { \u0026#34;kubectl.kubernetes.io/last-applied-configuration\u0026#34;: \u0026#34;{\\\u0026#34;apiVersion\\\u0026#34;:\\\u0026#34;chaosblade.io/v1alpha1\\\u0026#34;,\\\u0026#34;kind\\\u0026#34;:\\\u0026#34;ChaosBlade\\\u0026#34;,\\\u0026#34;metadata\\\u0026#34;:{\\\u0026#34;annotations\\\u0026#34;:{},\\\u0026#34;name\\\u0026#34;:\\\u0026#34;stop-node-process-by-names\\\u0026#34;},\\\u0026#34;spec\\\u0026#34;:{\\\u0026#34;experiments\\\u0026#34;:[{\\\u0026#34;action\\\u0026#34;:\\\u0026#34;stop\\\u0026#34;,\\\u0026#34;desc\\\u0026#34;:\\\u0026#34;kill node process by names\\\u0026#34;,\\\u0026#34;matchers\\\u0026#34;:[{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;names\\\u0026#34;,\\\u0026#34;value\\\u0026#34;:[\\\u0026#34;docker20\\\u0026#34;]},{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;process\\\u0026#34;,\\\u0026#34;value\\\u0026#34;:[\\\u0026#34;redis-server\\\u0026#34;]}],\\\u0026#34;scope\\\u0026#34;:\\\u0026#34;node\\\u0026#34;,\\\u0026#34;target\\\u0026#34;:\\\u0026#34;process\\\u0026#34;}]}}\\n\u0026#34; }, \u0026#34;creationTimestamp\u0026#34;: \u0026#34;2020-06-08T08:20:36Z\u0026#34;, \u0026#34;finalizers\u0026#34;: [ \u0026#34;finalizer.chaosblade.io\u0026#34; ], \u0026#34;generation\u0026#34;: 1, \u0026#34;name\u0026#34;: \u0026#34;stop-node-process-by-names\u0026#34;, \u0026#34;resourceVersion\u0026#34;: \u0026#34;1028075\u0026#34;, \u0026#34;selfLink\u0026#34;: \u0026#34;/apis/chaosblade.io/v1alpha1/chaosblades/stop-node-process-by-names\u0026#34;, \u0026#34;uid\u0026#34;: \u0026#34;40ebc6e6-4e2f-45dc-9a62-dc60527a1f4f\u0026#34; }, \u0026#34;spec\u0026#34;: { \u0026#34;experiments\u0026#34;: [ { \u0026#34;action\u0026#34;: \u0026#34;stop\u0026#34;, \u0026#34;desc\u0026#34;: \u0026#34;kill node process by names\u0026#34;, \u0026#34;matchers\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;names\u0026#34;, \u0026#34;value\u0026#34;: [ \u0026#34;docker20\u0026#34; ] }, { \u0026#34;name\u0026#34;: \u0026#34;process\u0026#34;, \u0026#34;value\u0026#34;: [ \u0026#34;redis-server\u0026#34; ] } ], \u0026#34;scope\u0026#34;: \u0026#34;node\u0026#34;, \u0026#34;target\u0026#34;: \u0026#34;process\u0026#34; } ] }, \u0026#34;status\u0026#34;: { \u0026#34;expStatuses\u0026#34;: [ { \u0026#34;action\u0026#34;: \u0026#34;stop\u0026#34;, \u0026#34;resStatuses\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;e71f0902c13f2de1\u0026#34;, \u0026#34;kind\u0026#34;: \u0026#34;node\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;docker20\u0026#34;, \u0026#34;nodeName\u0026#34;: \u0026#34;docker20\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Success\u0026#34;, \u0026#34;success\u0026#34;: true, \u0026#34;uid\u0026#34;: \u0026#34;51d4553b-8da2-46ab-9b3d-51a11ae6d06f\u0026#34; } ], \u0026#34;scope\u0026#34;: \u0026#34;node\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Success\u0026#34;, \u0026#34;success\u0026#34;: true, \u0026#34;target\u0026#34;: \u0026#34;process\u0026#34; } ], \u0026#34;phase\u0026#34;: \u0026#34;Running\u0026#34; } } 观测结果 # 进入实验 node $ ssh kk@192.168.1.129 # 查看 redis-server 进程号 $ ps aux| grep redis-server root 5632 0.0 0.0 41520 4168 ? Tl 06:28 0:06 redis-server *:6379 可以看到 redis-server 此刻进程处于暂停状态了（T）。\n停止实验 执行命令：kubectl delete -f stop_node_process_by_names.yaml\n或者直接删除 blade 资源：kubectl delete blade stop-node-process-by-names\n","excerpt":"此实验会挂起指定节点上的 redis-server 进程。\n参数    参数 类型 说明     process string 进程关键词，会在整个命令行中查找   process-cmd …","ref":"/chaosblade-website/docs/operator/node/node-process/stop_node_process/","title":"挂起点上指定进程"},{"body":"","excerpt":"","ref":"/chaosblade-website/docs/","title":"文档"},{"body":"对 chaosblade 命名空间中，对 redis-master-68857cd57c-hknb6 Pod 中 container id 是 02655dfdd9f0f712a10d63fdc6721f4dcee0a390e37717fff068bf3f85abf85e 的容器注入丢包率 100% 的故障，只针对 IP 为 10.42.0.26 的 pod 生效，也就是除 10.42.0.26 以外的 pod 都能正常访问 redis-master-68857cd57c-hknb6。\n实验参数    参数 类型 说明     destination-ip string 目标 IP. 支持通过子网掩码来指定一个网段的IP地址, 例如 192.168.1.0/24. 则 192.168.1.0~192.168.1.255 都生效。你也可以指定固定的 IP，如 192.168.1.1 或者 192.168.1.1/32，也可以通过都号分隔多个参数，例如 192.168.1.1,192.168.2.1。   exclude-port string 排除掉的端口，默认会忽略掉通信的对端端口，目的是保留通信可用。可以指定多个，使用逗号分隔或者连接符表示范围，例如 22,8000 或者 8000-8010。 这个参数不能与 \u0026ndash;local-port 或者 \u0026ndash;remote-port 参数一起使用。   exclude-ip string 排除受影响的 IP，支持通过子网掩码来指定一个网段的IP地址, 例如 192.168.1.0/24. 则 192.168.1.0~192.168.1.255 都生效。你也可以指定固定的 IP，如 192.168.1.1 或者 192.168.1.1/32，也可以通过都号分隔多个参数，例如 192.168.1.1,192.168.2.1。   interface string 网卡设备，例如 eth0 (必要参数)。   local-port string 本地端口，一般是本机暴露服务的端口。可以指定多个，使用逗号分隔或者连接符表示范围，例如 80,8000-8080。   percent string 丢包百分比，取值在[0, 100]的正整数 (必要参数)。   remote-port string 远程端口，一般是要访问的外部暴露服务的端口。可以指定多个，使用逗号分隔或者连接符表示范围，例如 80,8000-8080。   force  强制覆盖已有的 tc 规则，请务必在明确之前的规则可覆盖的情况下使用。   ignore-peer-port  针对添加 \u0026ndash;exclude-port 参数，报 ss 命令找不到的情况下使用，忽略排除端口。   timeout string 设定运行时长，单位是秒，通用参数。    配置文件 实验配置文件：loss_container_network_by_id.yaml\napiVersion:chaosblade.io/v1alpha1kind:ChaosBlademetadata:name:loss-container-network-by-idspec:experiments:- scope:containertarget:networkaction:lossdesc:\u0026#34;loss container network by container id\u0026#34;matchers:- name:container-idsvalue:- \u0026#34;02655dfdd9f0f712a10d63fdc6721f4dcee0a390e37717fff068bf3f85abf85e\u0026#34;- name:namesvalue:- \u0026#34;redis-master-68857cd57c-hknb6\u0026#34;- name:namespacevalue:- \u0026#34;chaosblade\u0026#34;- name:interfacevalue:[\u0026#34;eth0\u0026#34;]- name:percentvalue:[\u0026#34;100\u0026#34;]- name:timeoutvalue:[\u0026#34;60\u0026#34;]- name:destination-ipvalue:[\u0026#34;10.42.0.26\u0026#34;]开始实验 获取 pod 名称和 container id 内容同上。\n执行命令，开始实验：\n$ kubectl apply -f loss_container_network_by_id.yaml 查看实验状态 执行 kubectl get blade loss-container-network-by-id -o json 命令，查看实验状态：\n{ \u0026#34;apiVersion\u0026#34;: \u0026#34;chaosblade.io/v1alpha1\u0026#34;, \u0026#34;kind\u0026#34;: \u0026#34;ChaosBlade\u0026#34;, \u0026#34;metadata\u0026#34;: { \u0026#34;annotations\u0026#34;: { \u0026#34;kubectl.kubernetes.io/last-applied-configuration\u0026#34;: \u0026#34;{\\\u0026#34;apiVersion\\\u0026#34;:\\\u0026#34;chaosblade.io/v1alpha1\\\u0026#34;,\\\u0026#34;kind\\\u0026#34;:\\\u0026#34;ChaosBlade\\\u0026#34;,\\\u0026#34;metadata\\\u0026#34;:{\\\u0026#34;annotations\\\u0026#34;:{},\\\u0026#34;name\\\u0026#34;:\\\u0026#34;loss-container-network-by-id\\\u0026#34;},\\\u0026#34;spec\\\u0026#34;:{\\\u0026#34;experiments\\\u0026#34;:[{\\\u0026#34;action\\\u0026#34;:\\\u0026#34;loss\\\u0026#34;,\\\u0026#34;desc\\\u0026#34;:\\\u0026#34;loss container network by container id\\\u0026#34;,\\\u0026#34;matchers\\\u0026#34;:[{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;container-ids\\\u0026#34;,\\\u0026#34;value\\\u0026#34;:[\\\u0026#34;02655dfdd9f0f712a10d63fdc6721f4dcee0a390e37717fff068bf3f85abf85e\\\u0026#34;]},{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;names\\\u0026#34;,\\\u0026#34;value\\\u0026#34;:[\\\u0026#34;redis-master-68857cd57c-hknb6\\\u0026#34;]},{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;namespace\\\u0026#34;,\\\u0026#34;value\\\u0026#34;:[\\\u0026#34;chaosblade\\\u0026#34;]},{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;interface\\\u0026#34;,\\\u0026#34;value\\\u0026#34;:[\\\u0026#34;eth0\\\u0026#34;]},{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;percent\\\u0026#34;,\\\u0026#34;value\\\u0026#34;:[\\\u0026#34;100\\\u0026#34;]},{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;timeout\\\u0026#34;,\\\u0026#34;value\\\u0026#34;:[\\\u0026#34;60\\\u0026#34;]},{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;destination-ip\\\u0026#34;,\\\u0026#34;value\\\u0026#34;:[\\\u0026#34;10.42.0.26\\\u0026#34;]}],\\\u0026#34;scope\\\u0026#34;:\\\u0026#34;container\\\u0026#34;,\\\u0026#34;target\\\u0026#34;:\\\u0026#34;network\\\u0026#34;}]}}\\n\u0026#34; }, \u0026#34;creationTimestamp\u0026#34;: \u0026#34;2020-06-04T07:41:37Z\u0026#34;, \u0026#34;deletionGracePeriodSeconds\u0026#34;: 0, \u0026#34;deletionTimestamp\u0026#34;: \u0026#34;2020-06-04T07:42:50Z\u0026#34;, \u0026#34;finalizers\u0026#34;: [ \u0026#34;finalizer.chaosblade.io\u0026#34; ], \u0026#34;generation\u0026#34;: 2, \u0026#34;name\u0026#34;: \u0026#34;loss-container-network-by-id\u0026#34;, \u0026#34;resourceVersion\u0026#34;: \u0026#34;180856\u0026#34;, \u0026#34;selfLink\u0026#34;: \u0026#34;/apis/chaosblade.io/v1alpha1/chaosblades/loss-container-network-by-id\u0026#34;, \u0026#34;uid\u0026#34;: \u0026#34;d64873ae-3956-4660-9e35-27241bd48fa4\u0026#34; }, \u0026#34;spec\u0026#34;: { \u0026#34;experiments\u0026#34;: [ { \u0026#34;action\u0026#34;: \u0026#34;loss\u0026#34;, \u0026#34;desc\u0026#34;: \u0026#34;loss container network by container id\u0026#34;, \u0026#34;matchers\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;container-ids\u0026#34;, \u0026#34;value\u0026#34;: [ \u0026#34;02655dfdd9f0f712a10d63fdc6721f4dcee0a390e37717fff068bf3f85abf85e\u0026#34; ] }, { \u0026#34;name\u0026#34;: \u0026#34;names\u0026#34;, \u0026#34;value\u0026#34;: [ \u0026#34;redis-master-68857cd57c-hknb6\u0026#34; ] }, { \u0026#34;name\u0026#34;: \u0026#34;namespace\u0026#34;, \u0026#34;value\u0026#34;: [ \u0026#34;chaosblade\u0026#34; ] }, { \u0026#34;name\u0026#34;: \u0026#34;interface\u0026#34;, \u0026#34;value\u0026#34;: [ \u0026#34;eth0\u0026#34; ] }, { \u0026#34;name\u0026#34;: \u0026#34;percent\u0026#34;, \u0026#34;value\u0026#34;: [ \u0026#34;100\u0026#34; ] }, { \u0026#34;name\u0026#34;: \u0026#34;timeout\u0026#34;, \u0026#34;value\u0026#34;: [ \u0026#34;60\u0026#34; ] }, { \u0026#34;name\u0026#34;: \u0026#34;destination-ip\u0026#34;, \u0026#34;value\u0026#34;: [ \u0026#34;10.42.0.26\u0026#34; ] } ], \u0026#34;scope\u0026#34;: \u0026#34;container\u0026#34;, \u0026#34;target\u0026#34;: \u0026#34;network\u0026#34; } ] }, \u0026#34;status\u0026#34;: { \u0026#34;expStatuses\u0026#34;: [ { \u0026#34;action\u0026#34;: \u0026#34;loss\u0026#34;, \u0026#34;resStatuses\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;8ad94f6be81dec80\u0026#34;, \u0026#34;kind\u0026#34;: \u0026#34;container\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;redis-master\u0026#34;, \u0026#34;nodeName\u0026#34;: \u0026#34;keking\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Success\u0026#34;, \u0026#34;success\u0026#34;: true, \u0026#34;uid\u0026#34;: \u0026#34;02655dfdd9f0f712a10d63fdc6721f4dcee0a390e37717fff068bf3f85abf85e\u0026#34; } ], \u0026#34;scope\u0026#34;: \u0026#34;container\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Success\u0026#34;, \u0026#34;success\u0026#34;: true, \u0026#34;target\u0026#34;: \u0026#34;network\u0026#34; } ], \u0026#34;phase\u0026#34;: \u0026#34;Running\u0026#34; } } 观测结果 # 获取实验 pod ip $ kubectl get pod -l app=redis,role=master -o jsonpath={.items..status.podIP} 10.42.0.19 # 进入观测 pod，IP为：10.42.0.26（被设置丢包率 100%） $ kubectl exec -it redis-slave-55d8c8ffbd-jd8sm bash # Ping 实验Pod ip $ ping 10.42.0.19 PING 10.42.0.19 (10.42.0.19) 56(84) bytes of data. # 无响应 # 进入观测 pod，该 pod 未被指定丢包 $ kubectl exec -it redis-slave-55d8c8ffbd-22tsc bash # Ping 实验Pod ip $ ping 10.42.0.19 PING 10.42.0.19 (10.42.0.19) 56(84) bytes of data. 64 bytes from 10.42.0.19: icmp_seq=1 ttl=64 time=0.065 ms 64 bytes from 10.42.0.19: icmp_seq=2 ttl=64 time=0.051 ms 64 bytes from 10.42.0.19: icmp_seq=3 ttl=64 time=0.078 ms ... # 响应正常 这里在配置中还将 timeout 设置为 60 秒，60 秒后 100% 丢包的情况将会消失，这个配置是为了防止因丢包率设置太高，造成机器无法连接的情况。与其有相似功能的还有 exclude-port，该配置用来指定排除掉的丢包端口。\n 停止实验 执行命令：kubectl apply -f loss_container_network_by_id.yaml\n或者直接删除 blade 资源：kubectl delete blade loss-container-network-by-id\n","excerpt":"对 chaosblade 命名空间中，对 redis-master-68857cd57c-hknb6 Pod 中 container id …","ref":"/chaosblade-website/docs/operator/container/container-network/loss_container_network/","title":"网络丢包场景"},{"body":" 实验前，请先登录 node 节点，使用 ifconfig 命令查看网卡信息，不是所有系统默认的网卡名称都是 eth0。\n docker20 节点的 32436 端口注入丢包率 100% 的故障。\n参数    参数 类型 说明     destination-ip string 目标 IP. 支持通过子网掩码来指定一个网段的IP地址, 例如 192.168.1.0/24. 则 192.168.1.0~192.168.1.255 都生效。你也可以指定固定的 IP，如 192.168.1.1 或者 192.168.1.1/32，也可以通过都号分隔多个参数，例如 192.168.1.1,192.168.2.1。   exclude-port string 排除掉的端口，默认会忽略掉通信的对端端口，目的是保留通信可用。可以指定多个，使用逗号分隔或者连接符表示范围，例如 22,8000 或者 8000-8010。 这个参数不能与 \u0026ndash;local-port 或者 \u0026ndash;remote-port 参数一起使用。   exclude-ip string 排除受影响的 IP，支持通过子网掩码来指定一个网段的IP地址, 例如 192.168.1.0/24. 则 192.168.1.0~192.168.1.255 都生效。你也可以指定固定的 IP，如 192.168.1.1 或者 192.168.1.1/32，也可以通过都号分隔多个参数，例如 192.168.1.1,192.168.2.1。   interface string 网卡设备，例如 eth0 (必要参数)。   local-port string 本地端口，一般是本机暴露服务的端口。可以指定多个，使用逗号分隔或者连接符表示范围，例如 80,8000-8080。   percent string 丢包百分比，取值在[0, 100]的正整数 (必要参数)。   remote-port string 远程端口，一般是要访问的外部暴露服务的端口。可以指定多个，使用逗号分隔或者连接符表示范围，例如 80,8000-8080。   force  强制覆盖已有的 tc 规则，请务必在明确之前的规则可覆盖的情况下使用。   ignore-peer-port  针对添加 \u0026ndash;exclude-port 参数，报 ss 命令找不到的情况下使用，忽略排除端口。   timeout string 设定运行时长，单位是秒，通用参数。    配置文件 实验配置文件：loss_node_network_by_names.yaml\napiVersion:chaosblade.io/v1alpha1kind:ChaosBlademetadata:name:loss-node-network-by-namesspec:experiments:- scope:nodetarget:networkaction:lossdesc:\u0026#34;node network loss\u0026#34;matchers:- name:namesvalue:[\u0026#34;docker20\u0026#34;]- name:percentvalue:[\u0026#34;100\u0026#34;]- name:interfacevalue:[\u0026#34;ens33\u0026#34;]- name:local-portvalue:[\u0026#34;32436\u0026#34;]开始实验 选择一个节点，修改 loss_node_network_by_names.yaml 中的 names 值。\n执行命令，开始实验：\n$ kubectl apply -f loss_node_network_by_names.yaml 查看实验状态 执行 kubectl get blade loss-node-network-by-names -o json 命令，查看实验状态：\n{ \u0026#34;apiVersion\u0026#34;: \u0026#34;chaosblade.io/v1alpha1\u0026#34;, \u0026#34;kind\u0026#34;: \u0026#34;ChaosBlade\u0026#34;, \u0026#34;metadata\u0026#34;: { \u0026#34;annotations\u0026#34;: { \u0026#34;kubectl.kubernetes.io/last-applied-configuration\u0026#34;: \u0026#34;{\\\u0026#34;apiVersion\\\u0026#34;:\\\u0026#34;chaosblade.io/v1alpha1\\\u0026#34;,\\\u0026#34;kind\\\u0026#34;:\\\u0026#34;ChaosBlade\\\u0026#34;,\\\u0026#34;metadata\\\u0026#34;:{\\\u0026#34;annotations\\\u0026#34;:{},\\\u0026#34;name\\\u0026#34;:\\\u0026#34;loss-node-network-by-names\\\u0026#34;},\\\u0026#34;spec\\\u0026#34;:{\\\u0026#34;experiments\\\u0026#34;:[{\\\u0026#34;action\\\u0026#34;:\\\u0026#34;loss\\\u0026#34;,\\\u0026#34;desc\\\u0026#34;:\\\u0026#34;node network loss\\\u0026#34;,\\\u0026#34;matchers\\\u0026#34;:[{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;names\\\u0026#34;,\\\u0026#34;value\\\u0026#34;:[\\\u0026#34;docker20\\\u0026#34;]},{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;percent\\\u0026#34;,\\\u0026#34;value\\\u0026#34;:[\\\u0026#34;100\\\u0026#34;]},{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;interface\\\u0026#34;,\\\u0026#34;value\\\u0026#34;:[\\\u0026#34;ens33\\\u0026#34;]},{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;local-port\\\u0026#34;,\\\u0026#34;value\\\u0026#34;:[\\\u0026#34;32436\\\u0026#34;]}],\\\u0026#34;scope\\\u0026#34;:\\\u0026#34;node\\\u0026#34;,\\\u0026#34;target\\\u0026#34;:\\\u0026#34;network\\\u0026#34;}]}}\\n\u0026#34; }, \u0026#34;creationTimestamp\u0026#34;: \u0026#34;2020-06-08T02:41:56Z\u0026#34;, \u0026#34;finalizers\u0026#34;: [ \u0026#34;finalizer.chaosblade.io\u0026#34; ], \u0026#34;generation\u0026#34;: 1, \u0026#34;name\u0026#34;: \u0026#34;loss-node-network-by-names\u0026#34;, \u0026#34;resourceVersion\u0026#34;: \u0026#34;978403\u0026#34;, \u0026#34;selfLink\u0026#34;: \u0026#34;/apis/chaosblade.io/v1alpha1/chaosblades/loss-node-network-by-names\u0026#34;, \u0026#34;uid\u0026#34;: \u0026#34;5322e39a-a0ab-4521-a931-e57040344076\u0026#34; }, \u0026#34;spec\u0026#34;: { \u0026#34;experiments\u0026#34;: [ { \u0026#34;action\u0026#34;: \u0026#34;loss\u0026#34;, \u0026#34;desc\u0026#34;: \u0026#34;node network loss\u0026#34;, \u0026#34;matchers\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;names\u0026#34;, \u0026#34;value\u0026#34;: [ \u0026#34;docker20\u0026#34; ] }, { \u0026#34;name\u0026#34;: \u0026#34;percent\u0026#34;, \u0026#34;value\u0026#34;: [ \u0026#34;100\u0026#34; ] }, { \u0026#34;name\u0026#34;: \u0026#34;interface\u0026#34;, \u0026#34;value\u0026#34;: [ \u0026#34;ens33\u0026#34; ] }, { \u0026#34;name\u0026#34;: \u0026#34;local-port\u0026#34;, \u0026#34;value\u0026#34;: [ \u0026#34;32436\u0026#34; ] } ], \u0026#34;scope\u0026#34;: \u0026#34;node\u0026#34;, \u0026#34;target\u0026#34;: \u0026#34;network\u0026#34; } ] }, \u0026#34;status\u0026#34;: { \u0026#34;expStatuses\u0026#34;: [ { \u0026#34;action\u0026#34;: \u0026#34;loss\u0026#34;, \u0026#34;resStatuses\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;b93929d018091e18\u0026#34;, \u0026#34;kind\u0026#34;: \u0026#34;node\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;docker20\u0026#34;, \u0026#34;nodeName\u0026#34;: \u0026#34;docker20\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Success\u0026#34;, \u0026#34;success\u0026#34;: true, \u0026#34;uid\u0026#34;: \u0026#34;51d4553b-8da2-46ab-9b3d-51a11ae6d06f\u0026#34; } ], \u0026#34;scope\u0026#34;: \u0026#34;node\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Success\u0026#34;, \u0026#34;success\u0026#34;: true, \u0026#34;target\u0026#34;: \u0026#34;network\u0026#34; } ], \u0026#34;phase\u0026#34;: \u0026#34;Running\u0026#34; } } 观测结果 该端口为 Guestbook nodeport 的端口，访问实验端口无响应，但是访问未开启实验的端口可以正常使用\n# 获取节点 IP $ kubectl get node -o wide NAME STATUS ROLES AGE VERSION INTERNAL-IP EXTERNAL-IP OS-IMAGE KERNEL-VERSION CONTAINER-RUNTIME docker20 Ready worker 3d16h v1.17.6 192.168.1.129 \u0026lt;none\u0026gt; Ubuntu 18.04.4 LTS 4.15.0-101-generic docker://19.3.11 kk Ready controlplane,etcd,worker 4d16h v1.17.6 192.168.4.210 \u0026lt;none\u0026gt; Ubuntu 18.04.4 LTS 4.15.0-101-generic docker://19.3.11 # 从实验节点访问 Guestbook - 无法访问 $ telnet 192.168.1.129 32436 Trying 192.168.1.129... telnet: connect to address 192.168.1.129: Operation timed out telnet: Unable to connect to remote host # 从非实验节点访问 Guestbook - 正常访问 $ telnet 192.168.4.210 32436 Trying 192.168.4.210... Connected to 192.168.4.210. Escape character is \u0026#39;^]\u0026#39;. 同样也可以直接从浏览器访问地址，验证实验。\n停止实验 执行命令：kubectl delete -f loss_node_network_by_names.yaml\n或者直接删除 blade 资源：kubectl delete blade loss-node-network-by-names\n","excerpt":"实验前，请先登录 node 节点，使用 ifconfig 命令查看网卡信息，不是所有系统默认的网卡名称都是 eth0。\n docker20 节点的 32436 端口注入丢包率 100% 的故障。 …","ref":"/chaosblade-website/docs/operator/node/node-network/loss_node_network/","title":"网络丢包场景"},{"body":"在 chaosblade 命名空间中，对 redis-master-68857cd57c-dzbs9 Pod 注入丢包率 100% 的故障，只针对 IP 为 10.42.69.42 的 pod 生效，也就是除 10.42.69.42 以外的 pod 都能正常访问 redis-master-68857cd57c-dzbs9。\n参数    参数 类型 说明     destination-ip string 目标 IP. 支持通过子网掩码来指定一个网段的IP地址, 例如 192.168.1.0/24. 则 192.168.1.0~192.168.1.255 都生效。你也可以指定固定的 IP，如 192.168.1.1 或者 192.168.1.1/32，也可以通过都号分隔多个参数，例如 192.168.1.1,192.168.2.1。   exclude-port string 排除掉的端口，默认会忽略掉通信的对端端口，目的是保留通信可用。可以指定多个，使用逗号分隔或者连接符表示范围，例如 22,8000 或者 8000-8010。 这个参数不能与 \u0026ndash;local-port 或者 \u0026ndash;remote-port 参数一起使用。   exclude-ip string 排除受影响的 IP，支持通过子网掩码来指定一个网段的IP地址, 例如 192.168.1.0/24. 则 192.168.1.0~192.168.1.255 都生效。你也可以指定固定的 IP，如 192.168.1.1 或者 192.168.1.1/32，也可以通过都号分隔多个参数，例如 192.168.1.1,192.168.2.1。   interface string 网卡设备，例如 eth0 (必要参数)。   local-port string 本地端口，一般是本机暴露服务的端口。可以指定多个，使用逗号分隔或者连接符表示范围，例如 80,8000-8080。   percent string 丢包百分比，取值在[0, 100]的正整数 (必要参数)。   remote-port string 远程端口，一般是要访问的外部暴露服务的端口。可以指定多个，使用逗号分隔或者连接符表示范围，例如 80,8000-8080。   force  强制覆盖已有的 tc 规则，请务必在明确之前的规则可覆盖的情况下使用。   ignore-peer-port  针对添加 \u0026ndash;exclude-port 参数，报 ss 命令找不到的情况下使用，忽略排除端口。   timeout string 设定运行时长，单位是秒，通用参数。    配置文件 实验配置文件：loss_pod_network_by_names.yaml\napiVersion:chaosblade.io/v1alpha1kind:ChaosBlademetadata:name:loss-pod-network-by-namesspec:experiments:- scope:podtarget:networkaction:lossdesc:\u0026#34;loss pod network by names\u0026#34;matchers:- name:namesvalue:- \u0026#34;redis-master-68857cd57c-dzbs9\u0026#34;- name:namespacevalue:- \u0026#34;chaosblade\u0026#34;- name:interfacevalue:[\u0026#34;eth0\u0026#34;]- name:percentvalue:[\u0026#34;100\u0026#34;]- name:timeoutvalue:[\u0026#34;60\u0026#34;]- name:destination-ipvalue:[\u0026#34;10.42.69.42\u0026#34;]开始实验 获取 pod 名称内容同上。\n执行命令，开始实验：\n$ kubectl apply -f loss_pod_network_by_names.yaml 查看实验状态 执行 kubectl get blade loss-pod-network-by-names -o json 命令，查看实验状态：\n{ \u0026#34;apiVersion\u0026#34;: \u0026#34;chaosblade.io/v1alpha1\u0026#34;, \u0026#34;kind\u0026#34;: \u0026#34;ChaosBlade\u0026#34;, \u0026#34;metadata\u0026#34;: { \u0026#34;annotations\u0026#34;: { \u0026#34;kubectl.kubernetes.io/last-applied-configuration\u0026#34;: \u0026#34;{\\\u0026#34;apiVersion\\\u0026#34;:\\\u0026#34;chaosblade.io/v1alpha1\\\u0026#34;,\\\u0026#34;kind\\\u0026#34;:\\\u0026#34;ChaosBlade\\\u0026#34;,\\\u0026#34;metadata\\\u0026#34;:{\\\u0026#34;annotations\\\u0026#34;:{},\\\u0026#34;name\\\u0026#34;:\\\u0026#34;loss-pod-network-by-names\\\u0026#34;},\\\u0026#34;spec\\\u0026#34;:{\\\u0026#34;experiments\\\u0026#34;:[{\\\u0026#34;action\\\u0026#34;:\\\u0026#34;loss\\\u0026#34;,\\\u0026#34;desc\\\u0026#34;:\\\u0026#34;loss pod network by names\\\u0026#34;,\\\u0026#34;matchers\\\u0026#34;:[{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;names\\\u0026#34;,\\\u0026#34;value\\\u0026#34;:[\\\u0026#34;redis-master-68857cd57c-dzbs9\\\u0026#34;]},{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;namespace\\\u0026#34;,\\\u0026#34;value\\\u0026#34;:[\\\u0026#34;chaosblade\\\u0026#34;]},{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;interface\\\u0026#34;,\\\u0026#34;value\\\u0026#34;:[\\\u0026#34;eth0\\\u0026#34;]},{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;percent\\\u0026#34;,\\\u0026#34;value\\\u0026#34;:[\\\u0026#34;100\\\u0026#34;]},{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;timeout\\\u0026#34;,\\\u0026#34;value\\\u0026#34;:[\\\u0026#34;60\\\u0026#34;]},{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;destination-ip\\\u0026#34;,\\\u0026#34;value\\\u0026#34;:[\\\u0026#34;10.42.69.42\\\u0026#34;]}],\\\u0026#34;scope\\\u0026#34;:\\\u0026#34;pod\\\u0026#34;,\\\u0026#34;target\\\u0026#34;:\\\u0026#34;network\\\u0026#34;}]}}\\n\u0026#34; }, \u0026#34;creationTimestamp\u0026#34;: \u0026#34;2020-06-02T06:32:25Z\u0026#34;, \u0026#34;finalizers\u0026#34;: [ \u0026#34;finalizer.chaosblade.io\u0026#34; ], \u0026#34;generation\u0026#34;: 1, \u0026#34;name\u0026#34;: \u0026#34;loss-pod-network-by-names\u0026#34;, \u0026#34;resourceVersion\u0026#34;: \u0026#34;7715130\u0026#34;, \u0026#34;selfLink\u0026#34;: \u0026#34;/apis/chaosblade.io/v1alpha1/chaosblades/loss-pod-network-by-names\u0026#34;, \u0026#34;uid\u0026#34;: \u0026#34;3a75bc03-ca88-4ad2-bc06-d0b8998b92f2\u0026#34; }, \u0026#34;spec\u0026#34;: { \u0026#34;experiments\u0026#34;: [ { \u0026#34;action\u0026#34;: \u0026#34;loss\u0026#34;, \u0026#34;desc\u0026#34;: \u0026#34;loss pod network by names\u0026#34;, \u0026#34;matchers\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;names\u0026#34;, \u0026#34;value\u0026#34;: [ \u0026#34;redis-master-68857cd57c-dzbs9\u0026#34; ] }, { \u0026#34;name\u0026#34;: \u0026#34;namespace\u0026#34;, \u0026#34;value\u0026#34;: [ \u0026#34;chaosblade\u0026#34; ] }, { \u0026#34;name\u0026#34;: \u0026#34;interface\u0026#34;, \u0026#34;value\u0026#34;: [ \u0026#34;eth0\u0026#34; ] }, { \u0026#34;name\u0026#34;: \u0026#34;percent\u0026#34;, \u0026#34;value\u0026#34;: [ \u0026#34;100\u0026#34; ] }, { \u0026#34;name\u0026#34;: \u0026#34;timeout\u0026#34;, \u0026#34;value\u0026#34;: [ \u0026#34;60\u0026#34; ] }, { \u0026#34;name\u0026#34;: \u0026#34;destination-ip\u0026#34;, \u0026#34;value\u0026#34;: [ \u0026#34;10.42.69.42\u0026#34; ] } ], \u0026#34;scope\u0026#34;: \u0026#34;pod\u0026#34;, \u0026#34;target\u0026#34;: \u0026#34;network\u0026#34; } ] }, \u0026#34;status\u0026#34;: { \u0026#34;expStatuses\u0026#34;: [ { \u0026#34;action\u0026#34;: \u0026#34;loss\u0026#34;, \u0026#34;resStatuses\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;c1a540c8b29022fd\u0026#34;, \u0026#34;kind\u0026#34;: \u0026#34;pod\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;redis-master\u0026#34;, \u0026#34;nodeName\u0026#34;: \u0026#34;keking\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Success\u0026#34;, \u0026#34;success\u0026#34;: true, \u0026#34;uid\u0026#34;: \u0026#34;619a19ceb213f9b6152159bd868e88de2ddbf9a8aac606dc274b34bec6510c60\u0026#34; } ], \u0026#34;scope\u0026#34;: \u0026#34;pod\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Success\u0026#34;, \u0026#34;success\u0026#34;: true, \u0026#34;target\u0026#34;: \u0026#34;network\u0026#34; } ], \u0026#34;phase\u0026#34;: \u0026#34;Running\u0026#34; } } 观测结果 # 获取实验 pod ip $ kubectl get pod -l app=redis,role=master -o jsonpath={.items..status.podIP} 10.42.69.44 # 进入观测 pod，IP为：10.42.69.42（被设置丢包率 100%） $ kubectl exec -it redis-slave-6dd975d4c8-lm8jz bash # Ping 实验Pod ip $ ping 10.42.69.44 PING 10.42.69.44 (10.42.69.44) 56(84) bytes of data. # 无响应 # 进入观测 pod，该 pod 未被指定丢包 $ kubectl exec -it redis-slave-6dd975d4c8-2zrkb bash # Ping 实验Pod ip $ ping 10.42.69.44 PING 10.42.69.44 (10.42.69.44) 56(84) bytes of data. 64 bytes from 10.42.69.44: icmp_seq=1 ttl=63 time=0.128 ms 64 bytes from 10.42.69.44: icmp_seq=2 ttl=63 time=0.128 ms 64 bytes from 10.42.69.44: icmp_seq=3 ttl=63 time=0.092 ms ... # 响应正常 这里在配置中将 timeout 设置为 60 秒，60 秒后 100% 丢包的情况将会消失，这个配置是为了防止因丢包率设置太高，造成机器无法连接的情况。与其有相似功能的还有 exclude-port，该配置指定一些端口不会丢包，以免该 pod 失联。\n停止实验 执行命令：kubectl delete -f loss_pod_network_by_names.yaml\n或者直接删除 blade 资源：kubectl delete blade loss-pod-network-by-names\n","excerpt":"在 chaosblade 命名空间中，对 redis-master-68857cd57c-dzbs9 Pod 注入丢包率 100% 的故障，只针对 IP 为 10.42.69.42 的 pod 生效， …","ref":"/chaosblade-website/docs/operator/pod/pod-network/loss_pod_network/","title":"网络丢包场景"},{"body":"","excerpt":"","ref":"/chaosblade-website/docs/binaries/","title":"CLI 工具"},{"body":"","excerpt":"","ref":"/chaosblade-website/docs/operator/container/container-process/","title":"Container 内进程实验场景"},{"body":"面向云原生 chaosblade-operator 项目是针对云原生平台所实现的混沌实验注入工具，遵循混沌实验模型规范化实验场景，把实验定义为 Kubernetes CRD 资源，将实验模型映射为 Kubernetes 资源属性，很友好的将混沌实验模型与 Kubernetes 声明式设计结合在一起，依靠混沌实验模型便捷开发场景的同时，又可以很好的结合 Kubernetes 设计理念，通过 kubectl 或者编写代码直接调用 Kubernetes API 来创建、更新、删除混沌实验，而且资源状态可以非常清晰的表示实验的执行状态，标准化实现 Kubernetes 故障注入。除了使用上述方式执行实验外，还可以使用 chaosblade cli 方式非常方便的执行 kubernetes 实验场景，查询实验状态等。\n具体请阅读：云原生下的混沌工程实践\nGuestbook 文档中的示例实验会用到 guestbook 应用，尝试之前请先安装。\n# helm 3 # add repo $ helm repo add apphub-incubator https://apphub.aliyuncs.com/incubator/ # install $ helm install guestbook apphub-incubator/guestbook --set service.type=NodePort --namespace=chaosblade  默认的 Service 类型为 LoadBalancer，这里为了方便访问设置为了 NodePort。\n ","excerpt":"面向云原生 chaosblade-operator 项目是针对云原生平台所实现的混沌实验注入工具，遵循混沌实验模型规范化实验场景，把实验定义为 Kubernetes CRD 资源， …","ref":"/chaosblade-website/docs/operator/","title":"Kubernetes 平台场景"},{"body":"参数\nnode 资源均支持以下参数。\n   参数 类型 说明 默认值     evict-count string 限制实验生效的数量    evict-percent string 限制实验生效数量的百分比，不包含 %    labels string Pod 资源标签，多个标签之间是或的关系    names string Pod 资源名    waiting-time string 实验结果等待时间，参数值要包含单位，例如 10s，1m 20s    ","excerpt":"参数\nnode 资源均支持以下参数。\n   参数 类型 说明 默认值     evict-count string 限制实验生效的数量    evict-percent string 限制实验生效数量 …","ref":"/chaosblade-website/docs/operator/node/","title":"Node 场景"},{"body":"","excerpt":"","ref":"/chaosblade-website/docs/operator/node/node-disk/","title":"Node 磁盘相关场景"},{"body":"","excerpt":"","ref":"/chaosblade-website/docs/operator/pod/pod-io/","title":"Pod 文件系统相关场景"},{"body":"","excerpt":"","ref":"/chaosblade-website/docs/binaries/prepare/","title":"prepare 命令"},{"body":"欢迎提交缺陷、问题、建议和新功能，所有项目（包含其他子项目）的问题都可以提交到 Github Issues\n每双周社区会举行一次社区会议，在钉钉群举行\n你也可以通过以下方式联系我们：\n 钉钉群（推荐）：23177705 Gitter room: https://gitter.im/chaosblade-io/community 邮箱：chaosblade.io.01@gmail.com Twitter: chaosblade.io  ","excerpt":"欢迎提交缺陷、问题、建议和新功能，所有项目（包含其他子项目）的问题都可以提交到 Github Issues\n每双周社区会举行一次社区会议，在钉钉群举行\n你也可以通过以下方式联系我们：\n 钉钉群（推 …","ref":"/chaosblade-website/contributing/community/","title":"参与社区"},{"body":"本实验通过修改本地的 hosts，篡改域名地址映射，模拟 container 内域名访问异常场景。\n实验参数    参数 类型 说明     domain string 域名 (必要参数)   ip string 映射的 ip (必要参数)   timeout string 设定运行时长，单位是秒，通用参数。    配置文件 实验配置文件：tamper_container_dns_by_id.yaml\napiVersion:chaosblade.io/v1alpha1kind:ChaosBlademetadata:name:tamper-container-dns-by-idspec:experiments:- scope:containertarget:networkaction:dnsdesc:\u0026#34;tamper container dns by id\u0026#34;matchers:- name:container-idsvalue:- \u0026#34;02655dfdd9f0f712a10d63fdc6721f4dcee0a390e37717fff068bf3f85abf85e\u0026#34;- name:domainvalue:[\u0026#34;www.baidu.com\u0026#34;]- name:ipvalue:[\u0026#34;10.0.0.1\u0026#34;]# pod names- name:namesvalue:[\u0026#34;redis-master-68857cd57c-hknb6\u0026#34;]# or use pod labels- name:namespacevalue:[\u0026#34;chaosblade\u0026#34;]开始实验 获取 pod 名称和 container id 内容同上。\n执行命令，开始实验：\n$ kubectl apply -f tamper_container_dns_by_id.yaml 查看实验状态 执行 kubectl get blade tamper-container-dns-by-id -o json 命令，查看实验状态：\n{ \u0026#34;apiVersion\u0026#34;: \u0026#34;chaosblade.io/v1alpha1\u0026#34;, \u0026#34;kind\u0026#34;: \u0026#34;ChaosBlade\u0026#34;, \u0026#34;metadata\u0026#34;: { \u0026#34;annotations\u0026#34;: { \u0026#34;kubectl.kubernetes.io/last-applied-configuration\u0026#34;: \u0026#34;{\\\u0026#34;apiVersion\\\u0026#34;:\\\u0026#34;chaosblade.io/v1alpha1\\\u0026#34;,\\\u0026#34;kind\\\u0026#34;:\\\u0026#34;ChaosBlade\\\u0026#34;,\\\u0026#34;metadata\\\u0026#34;:{\\\u0026#34;annotations\\\u0026#34;:{},\\\u0026#34;name\\\u0026#34;:\\\u0026#34;tamper-container-dns-by-id\\\u0026#34;},\\\u0026#34;spec\\\u0026#34;:{\\\u0026#34;experiments\\\u0026#34;:[{\\\u0026#34;action\\\u0026#34;:\\\u0026#34;dns\\\u0026#34;,\\\u0026#34;desc\\\u0026#34;:\\\u0026#34;tamper container dns by id\\\u0026#34;,\\\u0026#34;matchers\\\u0026#34;:[{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;container-ids\\\u0026#34;,\\\u0026#34;value\\\u0026#34;:[\\\u0026#34;02655dfdd9f0f712a10d63fdc6721f4dcee0a390e37717fff068bf3f85abf85e\\\u0026#34;]},{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;domain\\\u0026#34;,\\\u0026#34;value\\\u0026#34;:[\\\u0026#34;www.baidu.com\\\u0026#34;]},{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;ip\\\u0026#34;,\\\u0026#34;value\\\u0026#34;:[\\\u0026#34;10.0.0.1\\\u0026#34;]},{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;names\\\u0026#34;,\\\u0026#34;value\\\u0026#34;:[\\\u0026#34;redis-master-68857cd57c-hknb6\\\u0026#34;]},{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;namespace\\\u0026#34;,\\\u0026#34;value\\\u0026#34;:[\\\u0026#34;chaosblade\\\u0026#34;]}],\\\u0026#34;scope\\\u0026#34;:\\\u0026#34;container\\\u0026#34;,\\\u0026#34;target\\\u0026#34;:\\\u0026#34;network\\\u0026#34;}]}}\\n\u0026#34; }, \u0026#34;creationTimestamp\u0026#34;: \u0026#34;2020-06-04T08:13:20Z\u0026#34;, \u0026#34;finalizers\u0026#34;: [ \u0026#34;finalizer.chaosblade.io\u0026#34; ], \u0026#34;generation\u0026#34;: 1, \u0026#34;name\u0026#34;: \u0026#34;tamper-container-dns-by-id\u0026#34;, \u0026#34;resourceVersion\u0026#34;: \u0026#34;185452\u0026#34;, \u0026#34;selfLink\u0026#34;: \u0026#34;/apis/chaosblade.io/v1alpha1/chaosblades/tamper-container-dns-by-id\u0026#34;, \u0026#34;uid\u0026#34;: \u0026#34;72ad4e2a-7c92-436d-b477-61f088191f8b\u0026#34; }, \u0026#34;spec\u0026#34;: { \u0026#34;experiments\u0026#34;: [ { \u0026#34;action\u0026#34;: \u0026#34;dns\u0026#34;, \u0026#34;desc\u0026#34;: \u0026#34;tamper container dns by id\u0026#34;, \u0026#34;matchers\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;container-ids\u0026#34;, \u0026#34;value\u0026#34;: [ \u0026#34;02655dfdd9f0f712a10d63fdc6721f4dcee0a390e37717fff068bf3f85abf85e\u0026#34; ] }, { \u0026#34;name\u0026#34;: \u0026#34;domain\u0026#34;, \u0026#34;value\u0026#34;: [ \u0026#34;www.baidu.com\u0026#34; ] }, { \u0026#34;name\u0026#34;: \u0026#34;ip\u0026#34;, \u0026#34;value\u0026#34;: [ \u0026#34;10.0.0.1\u0026#34; ] }, { \u0026#34;name\u0026#34;: \u0026#34;names\u0026#34;, \u0026#34;value\u0026#34;: [ \u0026#34;redis-master-68857cd57c-hknb6\u0026#34; ] }, { \u0026#34;name\u0026#34;: \u0026#34;namespace\u0026#34;, \u0026#34;value\u0026#34;: [ \u0026#34;chaosblade\u0026#34; ] } ], \u0026#34;scope\u0026#34;: \u0026#34;container\u0026#34;, \u0026#34;target\u0026#34;: \u0026#34;network\u0026#34; } ] }, \u0026#34;status\u0026#34;: { \u0026#34;expStatuses\u0026#34;: [ { \u0026#34;action\u0026#34;: \u0026#34;dns\u0026#34;, \u0026#34;resStatuses\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;e352348f9b0477b7\u0026#34;, \u0026#34;kind\u0026#34;: \u0026#34;container\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;redis-master\u0026#34;, \u0026#34;nodeName\u0026#34;: \u0026#34;keking\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Success\u0026#34;, \u0026#34;success\u0026#34;: true, \u0026#34;uid\u0026#34;: \u0026#34;02655dfdd9f0f712a10d63fdc6721f4dcee0a390e37717fff068bf3f85abf85e\u0026#34; } ], \u0026#34;scope\u0026#34;: \u0026#34;container\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Success\u0026#34;, \u0026#34;success\u0026#34;: true, \u0026#34;target\u0026#34;: \u0026#34;network\u0026#34; } ], \u0026#34;phase\u0026#34;: \u0026#34;Running\u0026#34; } } 观测结果 # 进入实验 pod $ kubectl exec -it redis-master-68857cd57c-hknb6 bash # Ping www.baidu.com $ ping www.baidu.com # 无响应 可以看到 Pod 的 /etc/hosts 文件被修改，模拟了 dns 解析异常的场景。\n","excerpt":"本实验通过修改本地的 hosts，篡改域名地址映射，模拟 container 内域名访问异常场景。\n实验参数    参数 类型 说明     domain string 域名 (必要参数)   ip …","ref":"/chaosblade-website/docs/operator/container/container-network/tamper_container_dns/","title":"域名访问异常场景"},{"body":"本实验通过修改 Node 的 hosts，篡改域名地址映射，模拟 Pod 内域名访问异常场景。\n参数    参数 类型 说明     domain string 域名 (必要参数)   ip string 映射的 ip (必要参数)   timeout string 设定运行时长，单位是秒，通用参数。    配置文件 实验配置文件：dns_node_network_by_names.yaml\napiVersion:chaosblade.io/v1alpha1kind:ChaosBlademetadata:name:dns-node-network-by-namesspec:experiments:- scope:nodetarget:networkaction:dnsdesc:\u0026#34;dns node network by names\u0026#34;matchers:- name:namesvalue:- \u0026#34;docker20\u0026#34;- name:domainvalue:[\u0026#34;www.baidu.com\u0026#34;]- name:ipvalue:[\u0026#34;10.0.0.1\u0026#34;]开始实验 选择一个节点，修改 dns_node_network_by_names.yaml 中的 names 值。\n执行命令，开始实验：\n$ kubectl apply -f dns_node_network_by_names.yaml 查看实验状态 执行 kubectl get blade dns-node-network-by-names -o json 命令，查看实验状态：\n{ \u0026#34;apiVersion\u0026#34;: \u0026#34;chaosblade.io/v1alpha1\u0026#34;, \u0026#34;kind\u0026#34;: \u0026#34;ChaosBlade\u0026#34;, \u0026#34;metadata\u0026#34;: { \u0026#34;annotations\u0026#34;: { \u0026#34;kubectl.kubernetes.io/last-applied-configuration\u0026#34;: \u0026#34;{\\\u0026#34;apiVersion\\\u0026#34;:\\\u0026#34;chaosblade.io/v1alpha1\\\u0026#34;,\\\u0026#34;kind\\\u0026#34;:\\\u0026#34;ChaosBlade\\\u0026#34;,\\\u0026#34;metadata\\\u0026#34;:{\\\u0026#34;annotations\\\u0026#34;:{},\\\u0026#34;name\\\u0026#34;:\\\u0026#34;dns-node-network-by-names\\\u0026#34;},\\\u0026#34;spec\\\u0026#34;:{\\\u0026#34;experiments\\\u0026#34;:[{\\\u0026#34;action\\\u0026#34;:\\\u0026#34;dns\\\u0026#34;,\\\u0026#34;desc\\\u0026#34;:\\\u0026#34;dns node network by names\\\u0026#34;,\\\u0026#34;matchers\\\u0026#34;:[{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;names\\\u0026#34;,\\\u0026#34;value\\\u0026#34;:[\\\u0026#34;docker20\\\u0026#34;]},{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;domain\\\u0026#34;,\\\u0026#34;value\\\u0026#34;:[\\\u0026#34;www.baidu.com\\\u0026#34;]},{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;ip\\\u0026#34;,\\\u0026#34;value\\\u0026#34;:[\\\u0026#34;10.0.0.1\\\u0026#34;]}],\\\u0026#34;scope\\\u0026#34;:\\\u0026#34;node\\\u0026#34;,\\\u0026#34;target\\\u0026#34;:\\\u0026#34;network\\\u0026#34;}]}}\\n\u0026#34; }, \u0026#34;creationTimestamp\u0026#34;: \u0026#34;2020-06-08T03:39:54Z\u0026#34;, \u0026#34;finalizers\u0026#34;: [ \u0026#34;finalizer.chaosblade.io\u0026#34; ], \u0026#34;generation\u0026#34;: 1, \u0026#34;name\u0026#34;: \u0026#34;dns-node-network-by-names\u0026#34;, \u0026#34;resourceVersion\u0026#34;: \u0026#34;986912\u0026#34;, \u0026#34;selfLink\u0026#34;: \u0026#34;/apis/chaosblade.io/v1alpha1/chaosblades/dns-node-network-by-names\u0026#34;, \u0026#34;uid\u0026#34;: \u0026#34;dd6fa6bc-e04a-4566-b949-4630ed94b1c2\u0026#34; }, \u0026#34;spec\u0026#34;: { \u0026#34;experiments\u0026#34;: [ { \u0026#34;action\u0026#34;: \u0026#34;dns\u0026#34;, \u0026#34;desc\u0026#34;: \u0026#34;dns node network by names\u0026#34;, \u0026#34;matchers\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;names\u0026#34;, \u0026#34;value\u0026#34;: [ \u0026#34;docker20\u0026#34; ] }, { \u0026#34;name\u0026#34;: \u0026#34;domain\u0026#34;, \u0026#34;value\u0026#34;: [ \u0026#34;www.baidu.com\u0026#34; ] }, { \u0026#34;name\u0026#34;: \u0026#34;ip\u0026#34;, \u0026#34;value\u0026#34;: [ \u0026#34;10.0.0.1\u0026#34; ] } ], \u0026#34;scope\u0026#34;: \u0026#34;node\u0026#34;, \u0026#34;target\u0026#34;: \u0026#34;network\u0026#34; } ] }, \u0026#34;status\u0026#34;: { \u0026#34;expStatuses\u0026#34;: [ { \u0026#34;action\u0026#34;: \u0026#34;dns\u0026#34;, \u0026#34;resStatuses\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;626da6fac3f157a5\u0026#34;, \u0026#34;kind\u0026#34;: \u0026#34;node\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;docker20\u0026#34;, \u0026#34;nodeName\u0026#34;: \u0026#34;docker20\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Success\u0026#34;, \u0026#34;success\u0026#34;: true, \u0026#34;uid\u0026#34;: \u0026#34;51d4553b-8da2-46ab-9b3d-51a11ae6d06f\u0026#34; } ], \u0026#34;scope\u0026#34;: \u0026#34;node\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Success\u0026#34;, \u0026#34;success\u0026#34;: true, \u0026#34;target\u0026#34;: \u0026#34;network\u0026#34; } ], \u0026#34;phase\u0026#34;: \u0026#34;Running\u0026#34; } } 观测结果 # 进入实验 node $ ssh kk@192.168.1.129 # Ping www.baidu.com $ ping www.baidu.com # 无响应 可以看到 Node 的 /etc/hosts 文件被修改，模拟了 dns 解析异常的场景。\n停止实验 执行命令：kubectl delete -f dns_node_network_by_names.yaml\n或者直接删除 blade 资源：kubectl delete blade dns-node-network-by-names\n","excerpt":"本实验通过修改 Node 的 hosts，篡改域名地址映射，模拟 Pod 内域名访问异常场景。\n参数    参数 类型 说明     domain string 域名 (必要参数)   ip …","ref":"/chaosblade-website/docs/operator/node/node-network/dns_node_network/","title":"域名访问异常场景"},{"body":"本实验通过修改本地的 hosts，篡改域名地址映射，模拟 Pod 内域名访问异常场景。\n参数    参数 类型 说明     domain string 域名 (必要参数)   ip string 映射的 ip (必要参数)   timeout string 设定运行时长，单位是秒，通用参数。    配置文件 实验配置文件：dns_pod_network_by_names.yaml\napiVersion:chaosblade.io/v1alpha1kind:ChaosBlademetadata:name:dns-pod-network-by-namesspec:experiments:- scope:podtarget:networkaction:dnsdesc:\u0026#34;dns pod network by names\u0026#34;matchers:- name:namesvalue:- \u0026#34;redis-slave-6dd975d4c8-lm8jz\u0026#34;- name:namespacevalue:- \u0026#34;chaosblade\u0026#34;- name:domainvalue:[\u0026#34;www.baidu.com\u0026#34;]- name:ipvalue:[\u0026#34;10.0.0.1\u0026#34;]开始实验 获取 pod 名称内容同上。\n执行命令，开始实验：\n$ kubectl apply -f dns_pod_network_by_names.yaml 查看实验状态 执行 kubectl get blade dns-pod-network-by-names -o json  命令，查看实验状态：\n{ \u0026#34;apiVersion\u0026#34;: \u0026#34;chaosblade.io/v1alpha1\u0026#34;, \u0026#34;kind\u0026#34;: \u0026#34;ChaosBlade\u0026#34;, \u0026#34;metadata\u0026#34;: { \u0026#34;annotations\u0026#34;: { \u0026#34;kubectl.kubernetes.io/last-applied-configuration\u0026#34;: \u0026#34;{\\\u0026#34;apiVersion\\\u0026#34;:\\\u0026#34;chaosblade.io/v1alpha1\\\u0026#34;,\\\u0026#34;kind\\\u0026#34;:\\\u0026#34;ChaosBlade\\\u0026#34;,\\\u0026#34;metadata\\\u0026#34;:{\\\u0026#34;annotations\\\u0026#34;:{},\\\u0026#34;name\\\u0026#34;:\\\u0026#34;dns-pod-network-by-names\\\u0026#34;},\\\u0026#34;spec\\\u0026#34;:{\\\u0026#34;experiments\\\u0026#34;:[{\\\u0026#34;action\\\u0026#34;:\\\u0026#34;dns\\\u0026#34;,\\\u0026#34;desc\\\u0026#34;:\\\u0026#34;dns pod network by names\\\u0026#34;,\\\u0026#34;matchers\\\u0026#34;:[{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;names\\\u0026#34;,\\\u0026#34;value\\\u0026#34;:[\\\u0026#34;redis-slave-6dd975d4c8-lm8jz\\\u0026#34;]},{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;namespace\\\u0026#34;,\\\u0026#34;value\\\u0026#34;:[\\\u0026#34;chaosblade\\\u0026#34;]},{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;domain\\\u0026#34;,\\\u0026#34;value\\\u0026#34;:[\\\u0026#34;www.baidu.com\\\u0026#34;]},{\\\u0026#34;name\\\u0026#34;:\\\u0026#34;ip\\\u0026#34;,\\\u0026#34;value\\\u0026#34;:[\\\u0026#34;10.0.0.1\\\u0026#34;]}],\\\u0026#34;scope\\\u0026#34;:\\\u0026#34;pod\\\u0026#34;,\\\u0026#34;target\\\u0026#34;:\\\u0026#34;network\\\u0026#34;}]}}\\n\u0026#34; }, \u0026#34;creationTimestamp\u0026#34;: \u0026#34;2020-06-02T07:03:32Z\u0026#34;, \u0026#34;finalizers\u0026#34;: [ \u0026#34;finalizer.chaosblade.io\u0026#34; ], \u0026#34;generation\u0026#34;: 1, \u0026#34;name\u0026#34;: \u0026#34;dns-pod-network-by-names\u0026#34;, \u0026#34;resourceVersion\u0026#34;: \u0026#34;7719397\u0026#34;, \u0026#34;selfLink\u0026#34;: \u0026#34;/apis/chaosblade.io/v1alpha1/chaosblades/dns-pod-network-by-names\u0026#34;, \u0026#34;uid\u0026#34;: \u0026#34;08f25964-a73a-4b2c-9cea-0ad491c68345\u0026#34; }, \u0026#34;spec\u0026#34;: { \u0026#34;experiments\u0026#34;: [ { \u0026#34;action\u0026#34;: \u0026#34;dns\u0026#34;, \u0026#34;desc\u0026#34;: \u0026#34;dns pod network by names\u0026#34;, \u0026#34;matchers\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;names\u0026#34;, \u0026#34;value\u0026#34;: [ \u0026#34;redis-slave-6dd975d4c8-lm8jz\u0026#34; ] }, { \u0026#34;name\u0026#34;: \u0026#34;namespace\u0026#34;, \u0026#34;value\u0026#34;: [ \u0026#34;chaosblade\u0026#34; ] }, { \u0026#34;name\u0026#34;: \u0026#34;domain\u0026#34;, \u0026#34;value\u0026#34;: [ \u0026#34;www.baidu.com\u0026#34; ] }, { \u0026#34;name\u0026#34;: \u0026#34;ip\u0026#34;, \u0026#34;value\u0026#34;: [ \u0026#34;10.0.0.1\u0026#34; ] } ], \u0026#34;scope\u0026#34;: \u0026#34;pod\u0026#34;, \u0026#34;target\u0026#34;: \u0026#34;network\u0026#34; } ] }, \u0026#34;status\u0026#34;: { \u0026#34;expStatuses\u0026#34;: [ { \u0026#34;action\u0026#34;: \u0026#34;dns\u0026#34;, \u0026#34;resStatuses\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;470d7c22418e87c1\u0026#34;, \u0026#34;kind\u0026#34;: \u0026#34;pod\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;redis-slave\u0026#34;, \u0026#34;nodeName\u0026#34;: \u0026#34;keking\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Success\u0026#34;, \u0026#34;success\u0026#34;: true, \u0026#34;uid\u0026#34;: \u0026#34;a5996d866566fa7788d69b6f611769e3da3c81401cd20ecb0b53aebdb508e14c\u0026#34; } ], \u0026#34;scope\u0026#34;: \u0026#34;pod\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Success\u0026#34;, \u0026#34;success\u0026#34;: true, \u0026#34;target\u0026#34;: \u0026#34;network\u0026#34; } ], \u0026#34;phase\u0026#34;: \u0026#34;Running\u0026#34; } } 观测结果 # 进入实验 pod $ kubectl exec -it redis-slave-6dd975d4c8-lm8jz bash # Ping www.baidu.com $ ping www.baidu.com # 无响应 可以看到 Pod 的 /etc/hosts 文件被修改，模拟了 dns 解析异常的场景。\n停止实验 执行命令：kubectl delete -f dns_pod_network_by_names.yaml\n或者直接删除 blade 资源：kubectl delete blade dns-pod-network-by-names\n","excerpt":"本实验通过修改本地的 hosts，篡改域名地址映射，模拟 Pod 内域名访问异常场景。\n参数    参数 类型 说明     domain string 域名 (必要参数)   ip string 映 …","ref":"/chaosblade-website/docs/operator/pod/pod-network/dns_pod_network/","title":"域名访问异常场景"},{"body":"执行你的第一个混沌实验 我们拿 CPU 满载(CPU 使用率 100%) 演练场景举例（！！注意，在不清楚影响面的情况下，切勿在生产系统机器上执行），执行以下命令实施实验：\n开始实验 ./blade create cpu fullload 执行结果返回：\n{\u0026#34;code\u0026#34;:200,\u0026#34;success\u0026#34;:true,\u0026#34;result\u0026#34;:\u0026#34;7c1f7afc281482c8\u0026#34;} 查看故障 通过 top 命令查看 CPU 使用率\nCPU usage: 93.79% user, 6.20% sys, 0.0% idle 停止实验 此时命令已经生效，停止混沌实验，执行：\n./blade destroy 7c1f7afc281482c8 返回以下结果，表示停止实验成功\n{\u0026#34;code\u0026#34;:200,\u0026#34;success\u0026#34;:true,\u0026#34;result\u0026#34;:\u0026#34;command: cpu fullload --debug false --help false\u0026#34;} 再去观察 CPU 情况，CPU 负载已回到正常状态：\nCPU usage: 6.36% user, 4.74% sys, 88.88% idle 一次 CPU 满载演练完成。\n你的第二个混沌实验 下载 demo 这次实验，我们演练 Dubbo 应用，我们的需求是 consumer 调用 com.alibaba.demo.HelloService 服务下的 hello 接口延迟 3 秒。接下来我们下载所需要的 Dubbo Demo：\ndubbo-provider\ndubbo-consumer\n下载完成后，执行以下命令启动应用，注意必须先启动 dubbo-provider，然后再启动 dubbo-consumer:\n# 启动 dubbo-provider nohup java -Djava.net.preferIPv4Stack=true -Dproject.name=dubbo-provider -jar dubbo-provider-1.0-SNAPSHOT.jar \u0026gt; provider.nohup.log 2\u0026gt;\u0026amp;1 \u0026amp; # 稍等 2 秒，然后启动 dubbo-consumer nohup java -Dserver.port=8080 -Djava.net.preferIPv4Stack=true -Dproject.name=dubbo-consumer -jar dubbo-consumer-1.0-SNAPSHOT.jar \u0026gt; consumer.nohup.log 2\u0026gt;\u0026amp;1 \u0026amp; 访问 http://localhost:8080/hello?msg=world，返回以下信息，表示启动成功：\n{ msg: \u0026#34;Dubbo Service: Hello world\u0026#34; } 实验准备 接下来我们要使用 blade 工具进行混沌实验，在执行实验前，我们需要先执行 prepare 命令，挂载所需要的 java agent：\n./blade prepare jvm --process dubbo-consumer 返回以下结果，表示实验准备成功：\n{\u0026#34;code\u0026#34;:200,\u0026#34;success\u0026#34;:true,\u0026#34;result\u0026#34;:\u0026#34;e669d57f079a00cc\u0026#34;} 接口延迟实验 我们开始实施混沌实验，我们的需求是 consumer 调用 com.alibaba.demo.HelloService 服务下的 hello 接口延迟 3 秒。 我们执行 ./blade create dubbo delay -h 命令查看 dubbo 调用延迟的命令用法：\nUsage: blade create dubbo delay Flags: --appname string The consumer or provider application name --consumer To tag consumer role experiment. -h, --help help for delay --methodname string The method name in service interface --offset string delay offset for the time --process string Application process name --provider To tag provider experiment --service string The service interface --time string delay time (required) --version string the service version Global Flags: -d, --debug Set client to DEBUG mode 调用 com.alibaba.demo.HelloService 服务下的 hello 接口延迟 3 秒，我们执行以下命令：\n./blade create dubbo delay --time 3000 --service com.alibaba.demo.HelloService --methodname hello --consumer --process dubbo.consumer 查看故障 返回以下结果，表示执行成功；访问 http://localhost:8080/hello?msg=world 验证是否延迟 3 秒\n{\u0026#34;code\u0026#34;:200,\u0026#34;success\u0026#34;:true,\u0026#34;result\u0026#34;:\u0026#34;ec695fee1e458fc6\u0026#34;} 对实施实验的命令进行解析：\n --time: 3000，表示延迟 3000 ms；单位是 ms --service: com.alibaba.demo.HelloService， 表示调用的服务 --methodname: hello，表示服务接口方法 --consumer: 表示演练的是 dubbo consumer --process: dubbo.consumer，表示对哪个应用进程实施混沌实验  停止实验 停止当前延迟的混沌实验，再次访问 url 验证是否恢复正常：\n./blade destroy ec695fee1e458fc6 不尽兴的话，我们再实施调用刚才那个服务抛异常，执行 ./blade create dubbo throwCustomException -h 命令查看帮助：\nThrow custom exception with --exception option Usage: blade create dubbo throwCustomException Aliases: throwCustomException, tce Flags: --appname string The consumer or provider application name --consumer To tag consumer role experiment. --exception string Exception class inherit java.lang.Exception (required) -h, --help help for throwCustomException --methodname string The method name in service interface --process string Application process name --provider To tag provider experiment --service string The service interface --version string the service version Global Flags: -d, --debug Set client to DEBUG mode 抛出异常实验 和刚才延迟命令参数差不多，因为相同的参数是演练 dubbo 所需要的，不同的是没有了 --time，多了个 --exception 参数。 我们模拟调用刚才的服务抛 java.lang.Exception 异常：\n./blade create dubbo throwCustomException --exception java.lang.Exception --service com.alibaba.demo.HelloService --methodname hello --consumer --process dubbo.consumer 查看故障 返回以下结果，访问 http://localhost:8080/hello?msg=world 验证是否异常\n{\u0026#34;code\u0026#34;:200,\u0026#34;success\u0026#34;:true,\u0026#34;result\u0026#34;:\u0026#34;09dd96f4c062df69\u0026#34;} 停止实验 停止此次试验，再次访问请求，验证是否恢复：\n./blade destroy 09dd96f4c062df69 销毁实验 最后，我们撤销刚才的实验准备，即卸载 Java Agent：\n./blade revoke e669d57f079a00cc 如果找不到之前执行 prepare 返回的 UID 的话，执行 ./blade status --type prepare 命令查询：\n{ \u0026#34;code\u0026#34;: 200, \u0026#34;success\u0026#34;: true, \u0026#34;result\u0026#34;: [ { \u0026#34;Uid\u0026#34;: \u0026#34;e669d57f079a00cc\u0026#34;, \u0026#34;ProgramType\u0026#34;: \u0026#34;jvm\u0026#34;, \u0026#34;Process\u0026#34;: \u0026#34;dubbo.consumer\u0026#34;, \u0026#34;Port\u0026#34;: \u0026#34;59688\u0026#34;, \u0026#34;Status\u0026#34;: \u0026#34;Running\u0026#34;, \u0026#34;Error\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;CreateTime\u0026#34;: \u0026#34;2019-03-29T16:19:37.284579975+08:00\u0026#34;, \u0026#34;UpdateTime\u0026#34;: \u0026#34;2019-03-29T17:05:14.183382945+08:00\u0026#34; } ] } ","excerpt":"执行你的第一个混沌实验 我们拿 CPU 满载(CPU 使用率 100%) 演练场景举例（！！注意，在不清楚影响面的情况下，切勿在生产系统机器上执行），执行以下命令实施实验：\n开始实验 ./blade …","ref":"/chaosblade-website/docs/quickstart/first-exp/","title":"开始混沌实验"},{"body":"","excerpt":"","ref":"/chaosblade-website/docs/operator/node/node-process/","title":"Node 进程相关场景"},{"body":"","excerpt":"","ref":"/chaosblade-website/docs/binaries/revoke/","title":"revoke 命令"},{"body":"","excerpt":"","ref":"/chaosblade-website/docs/binaries/status/","title":"status 命令"},{"body":"","excerpt":"","ref":"/chaosblade-website/docs/binaries/query/","title":"query 命令"},{"body":"","excerpt":"","ref":"/chaosblade-website/docs/binaries/version/","title":"version 命令"},{"body":"","excerpt":"","ref":"/chaosblade-website/docs/binaries/server/","title":"server 命令"},{"body":"","excerpt":"","ref":"/chaosblade-website/blog/cloudnative/","title":"云原生"},{"body":"Chaosblade Operator：在云原生场景下，将 Kubernetes 设计理解与混沌实验模型相结合标准化实现方案 chaosblade-operator 项目是针对 Kubernetes 平台所实现的混沌实验注入工具，遵循上述混沌实验模型规范化实验场景，把实验定义为 Kubernetes CRD 资源，将实验模型中的四部分映射为 Kubernetes 资源属性，很友好的将混沌实验模型与 Kubernetes 声明式设计结合在一起，依靠混沌实验模型便捷开发场景的同时，又可以很好的结合 Kubernetes 设计理念，通过 kubectl 或者编写代码直接调用 Kubernetes API 来创建、更新、删除混沌实验，而且资源状态可以非常清晰的表示实验的执行状态，标准化实现 Kubernetes 故障注入。除了使用上述方式执行实验外，还可以使用 chaosblade cli 方式非常方便的执行 kubernetes 实验场景，查询实验状态等。 遵循混沌实验模型实现的 chaosblade operator 除上述优势之外，还可以实现基础资源、应用服务、Docker 容器等场景复用，大大方便了 Kubernetes 场景的扩展，所以在符合 Kubernetes 标准化实现场景方式之上，结合混沌实验模型可以更有效、更清晰、更方便的实现、使用混沌实验场景。 下面通过一个具体的案例来说明 chaosblade-operator 的使用：对 cn-hangzhou.192.168.0.205 节点本地端口 40690 访问模拟 60% 的网络丢包。 使用 yaml 配置方式，使用 kubectl 来执行实验\napiVersion: chaosblade.io/v1alpha1 kind: ChaosBlade metadata: name: loss-node-network-by-names spec: experiments: - scope: node target: network action: loss desc: \u0026quot;node network loss\u0026quot; matchers: - name: names value: [\u0026quot;cn-hangzhou.192.168.0.205\u0026quot;] - name: percent value: [\u0026quot;60\u0026quot;] - name: interface value: [\u0026quot;eth0\u0026quot;] - name: local-port value: [\u0026quot;40690\u0026quot;] 执行实验：\nkubectl apply -f loss-node-network-by-names.yaml 查询实验状态，返回信息如下（省略了 spec 等内容）：\n~ » kubectl get blade loss-node-network-by-names -o json { \u0026quot;apiVersion\u0026quot;: \u0026quot;chaosblade.io/v1alpha1\u0026quot;, \u0026quot;kind\u0026quot;: \u0026quot;ChaosBlade\u0026quot;, \u0026quot;metadata\u0026quot;: { \u0026quot;creationTimestamp\u0026quot;: \u0026quot;2019-11-04T09:56:36Z\u0026quot;, \u0026quot;finalizers\u0026quot;: [ \u0026quot;finalizer.chaosblade.io\u0026quot; ], \u0026quot;generation\u0026quot;: 1, \u0026quot;name\u0026quot;: \u0026quot;loss-node-network-by-names\u0026quot;, \u0026quot;resourceVersion\u0026quot;: \u0026quot;9262302\u0026quot;, \u0026quot;selfLink\u0026quot;: \u0026quot;/apis/chaosblade.io/v1alpha1/chaosblades/loss-node-network-by-names\u0026quot;, \u0026quot;uid\u0026quot;: \u0026quot;63a926dd-fee9-11e9-b3be-00163e136d88\u0026quot; }, \u0026quot;status\u0026quot;: { \u0026quot;expStatuses\u0026quot;: [ { \u0026quot;action\u0026quot;: \u0026quot;loss\u0026quot;, \u0026quot;resStatuses\u0026quot;: [ { \u0026quot;id\u0026quot;: \u0026quot;057acaa47ae69363\u0026quot;, \u0026quot;kind\u0026quot;: \u0026quot;node\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;cn-hangzhou.192.168.0.205\u0026quot;, \u0026quot;nodeName\u0026quot;: \u0026quot;cn-hangzhou.192.168.0.205\u0026quot;, \u0026quot;state\u0026quot;: \u0026quot;Success\u0026quot;, \u0026quot;success\u0026quot;: true, \u0026quot;uid\u0026quot;: \u0026quot;e179b30d-df77-11e9-b3be-00163e136d88\u0026quot; } ], \u0026quot;scope\u0026quot;: \u0026quot;node\u0026quot;, \u0026quot;state\u0026quot;: \u0026quot;Success\u0026quot;, \u0026quot;success\u0026quot;: true, \u0026quot;target\u0026quot;: \u0026quot;network\u0026quot; } ], \u0026quot;phase\u0026quot;: \u0026quot;Running\u0026quot; } } 通过以上内容可以很清晰的看出混沌实验的运行状态，执行以下命令停止实验：\nkubectl delete -f loss-node-network-by-names.yaml 或者直接删除此 blade 资源\nkubectl delete blade loss-node-network-by-names 还可以编辑 yaml 文件，更新实验内容执行，chaosblade operator 会完成实验的更新操作。\n使用 chaosblade cli 的 blade 命令执行\nblade create k8s node-network loss --percent 60 --interface eth0 --local-port 40690 --kubeconfig config --names cn-hangzhou.192.168.0.205 如果执行失败，会返回详细的错误信息；如果执行成功，会返回实验的 UID：\n{\u0026quot;code\u0026quot;:200,\u0026quot;success\u0026quot;:true,\u0026quot;result\u0026quot;:\u0026quot;e647064f5f20953c\u0026quot;} 可通过以下命令查询实验状态：\nblade query k8s create e647064f5f20953c --kubeconfig config { \u0026quot;code\u0026quot;: 200, \u0026quot;success\u0026quot;: true, \u0026quot;result\u0026quot;: { \u0026quot;uid\u0026quot;: \u0026quot;e647064f5f20953c\u0026quot;, \u0026quot;success\u0026quot;: true, \u0026quot;error\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;statuses\u0026quot;: [ { \u0026quot;id\u0026quot;: \u0026quot;fa471a6285ec45f5\u0026quot;, \u0026quot;uid\u0026quot;: \u0026quot;e179b30d-df77-11e9-b3be-00163e136d88\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;cn-hangzhou.192.168.0.205\u0026quot;, \u0026quot;state\u0026quot;: \u0026quot;Success\u0026quot;, \u0026quot;kind\u0026quot;: \u0026quot;node\u0026quot;, \u0026quot;success\u0026quot;: true, \u0026quot;nodeName\u0026quot;: \u0026quot;cn-hangzhou.192.168.0.205\u0026quot; } ] } } 销毁实验：\nblade destroy e647064f5f20953c 除了上述两种方式调用外，还可以使用 kubernetes client-go 方式执行，具体可参考：executor.go 代码实现。\n通过上述介绍，可以看出在设计 ChaosBlade 项目初期就考虑了云原生实验场景，将混沌实验模型与 Kubernetes 设计理念友好的结合在一起，不仅可以遵循 Kubernetes 标准化实现，还可以复用其他领域场景和 chaosblade cli 调用方式。\n详细的中文使用文档：https://chaosblade-io.gitbook.io/chaosblade-help-zh-cn/blade-create-k8s\n","excerpt":"Chaosblade Operator：在云原生场景下，将 Kubernetes 设计理解与混沌实验模型相结合标准化实现方案 chaosblade-operator 项目是针对 Kubernetes  …","ref":"/chaosblade-website/blog/cloudnative/chaosblade-operator/","title":"Chaosblade Operator：在云原生场景下，将 Kubernetes 设计理解与混沌实验模型相结合标准化实现方案 "},{"body":"如何获取最新版本 chaosblade 每次发布，相关的 changelog 和新版的包都会同步到 RELEASE ，可在此地址下载。\nWindows 平台是否有支持计划 暂无支持计划，不过欢迎大家提相关支持的 issue，社区会根据大家的需求来决定是否支持。\n执行 blade 命令报错： exec format error 或 cannot execute binary file 是由于 chaosblade 包和运行的平台不兼容造成的，请提 ISSUE来告知我们，issue 中标注下载的 chaosblade 包版本和操作系统版本信息。\n","excerpt":"如何获取最新版本 chaosblade 每次发布，相关的 changelog 和新版的包都会同步到 RELEASE ，可在此地址下载。\nWindows 平台是否有支持计划 暂无支持计划，不过欢迎大家提 …","ref":"/chaosblade-website/faq/","title":"FAQ"},{"body":"","excerpt":"","ref":"/chaosblade-website/try/","title":"互动教程"},{"body":"","excerpt":"","ref":"/chaosblade-website/blog/","title":"博客"},{"body":"以下是 ChaosBlade 贡献指南。\n感谢语  项目的成长离不开社区的支持，文档是社区发展的基石，将你的经验沉淀成文档传承给后来者，是一件多么令人愉快的工作。 开源世界，任何帮助都是贡献。 当然你也可以参与代码开发中来，chaosblade-io 组织下的项目总会有一个 issue 适合你。 社区会不定期的给贡献者发放周边纪念物以示感谢。  ","excerpt":"以下是 ChaosBlade 贡献指南。\n感谢语  项目的成长离不开社区的支持，文档是社区发展的基石，将你的经验沉淀成文档传承给后来者，是一件多么令人愉快的工作。 开源世界，任何帮助都是贡献。 当然你 …","ref":"/chaosblade-website/contributing/","title":"贡献指南"}]