"use strict";(self.webpackChunkchaosblade=self.webpackChunkchaosblade||[]).push([[88697],{15680:(e,a,n)=>{n.d(a,{xA:()=>c,yg:()=>g});var t=n(96540);function o(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function l(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function r(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?l(Object(n),!0).forEach((function(a){o(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function s(e,a){if(null==e)return{};var n,t,o=function(e,a){if(null==e)return{};var n,t,o={},l=Object.keys(e);for(t=0;t<l.length;t++)n=l[t],a.indexOf(n)>=0||(o[n]=e[n]);return o}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)n=l[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=t.createContext({}),d=function(e){var a=t.useContext(p),n=a;return e&&(n="function"==typeof e?e(a):r(r({},a),e)),n},c=function(e){var a=d(e.components);return t.createElement(p.Provider,{value:a},e.children)},i="mdxType",u={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},m=t.forwardRef((function(e,a){var n=e.components,o=e.mdxType,l=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),i=d(n),m=o,g=i["".concat(p,".").concat(m)]||i[m]||u[m]||l;return n?t.createElement(g,r(r({ref:a},c),{},{components:n})):t.createElement(g,r({ref:a},c))}));function g(e,a){var n=arguments,o=a&&a.mdxType;if("string"==typeof e||o){var l=n.length,r=new Array(l);r[0]=m;var s={};for(var p in a)hasOwnProperty.call(a,p)&&(s[p]=a[p]);s.originalType=e,s[i]="string"==typeof e?e:o,r[1]=s;for(var d=2;d<l;d++)r[d]=n[d];return t.createElement.apply(null,r)}return t.createElement.apply(null,n)}m.displayName="MDXCreateElement"},42965:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>p,contentTitle:()=>r,default:()=>u,frontMatter:()=>l,metadata:()=>s,toc:()=>d});var t=n(58168),o=(n(96540),n(15680));const l={authors:"guoxudong",title:"ChaosBlade\uff1a\u4ece\u96f6\u5f00\u59cb\u7684\u6df7\u6c8c\u5de5\u7a0b\uff08\u4e8c\uff09",tags:["chaosblade"],hide_table_of_contents:!1},r=void 0,s={permalink:"/blog/2020/06/09/chaosblade-start-2",editUrl:"https://github.com/chaosblade-io/chaosblade-website/edit/master/blog/2020-06-09-chaosblade-start-2.md",source:"@site/blog/2020-06-09-chaosblade-start-2.md",title:"ChaosBlade\uff1a\u4ece\u96f6\u5f00\u59cb\u7684\u6df7\u6c8c\u5de5\u7a0b\uff08\u4e8c\uff09",description:"\u524d\u8a00",date:"2020-06-09T00:00:00.000Z",formattedDate:"2020\u5e746\u67089\u65e5",tags:[{label:"chaosblade",permalink:"/blog/tags/chaosblade"}],readingTime:4.99,hasTruncateMarker:!0,authors:[{name:"\u90ed\u65ed\u4e1c\uff08@sunny0826\uff09",title:"Maintainer of ChaosBlade",url:"https://github.com/sunny0826",imageURL:"https://avatars.githubusercontent.com/u/24563928?v=4",key:"guoxudong"}],frontMatter:{authors:"guoxudong",title:"ChaosBlade\uff1a\u4ece\u96f6\u5f00\u59cb\u7684\u6df7\u6c8c\u5de5\u7a0b\uff08\u4e8c\uff09",tags:["chaosblade"],hide_table_of_contents:!1},prevItem:{title:"ChaosBlade\uff1a\u4ece\u96f6\u5f00\u59cb\u7684\u6df7\u6c8c\u5de5\u7a0b\uff08\u4e09\uff09",permalink:"/blog/2020/06/15/chaosblade-start-3"},nextItem:{title:"ChaosBlade\uff1a\u4ece\u96f6\u5f00\u59cb\u7684\u6df7\u6c8c\u5de5\u7a0b\uff08\u4e00\uff09",permalink:"/blog/2020/06/04/chaosblade-start-1"}},p={authorsImageUrls:[void 0]},d=[{value:"\u524d\u8a00",id:"\u524d\u8a00",level:2},{value:"ChaosBlade-Operator",id:"chaosblade-operator",level:2},{value:"\u5b89\u88c5",id:"\u5b89\u88c5",level:3},{value:"\u5feb\u901f\u5f00\u59cb",id:"\u5feb\u901f\u5f00\u59cb",level:2},{value:"\u5b9e\u9a8c\u51c6\u5907",id:"\u5b9e\u9a8c\u51c6\u5907",level:3},{value:"\u5f00\u59cb\u5b9e\u9a8c",id:"\u5f00\u59cb\u5b9e\u9a8c",level:3},{value:"\u67e5\u770b\u5b9e\u9a8c\u72b6\u6001",id:"\u67e5\u770b\u5b9e\u9a8c\u72b6\u6001",level:3},{value:"\u89c2\u6d4b\u7ed3\u679c",id:"\u89c2\u6d4b\u7ed3\u679c",level:3},{value:"\u7ed3\u8bed",id:"\u7ed3\u8bed",level:2}],c={toc:d},i="wrapper";function u(e){let{components:a,...n}=e;return(0,o.yg)(i,(0,t.A)({},c,n,{components:a,mdxType:"MDXLayout"}),(0,o.yg)("h2",{id:"\u524d\u8a00"},"\u524d\u8a00"),(0,o.yg)("p",null,"\u5728\u4e0a\u7bc7\u6587\u7ae0\u4e2d\uff0c\u6211\u4eec\u4ecb\u7ecd\u4e86",(0,o.yg)("strong",{parentName:"p"},"\u6df7\u6c8c\u5de5\u7a0b"),"\u4ee5\u53ca ",(0,o.yg)("strong",{parentName:"p"},"ChaosBlade"),"\u3002\u4ece\u672c\u7bc7\u5f00\u59cb\uff0c\u4ece ChaosBlade \u7684\u5b89\u88c5\u90e8\u7f72\uff0c\u5230\u5b9e\u9a8c\u7684\u521b\u5efa\u9500\u6bc1\uff0c\u5728\u5b9e\u8df5\u7684\u89d2\u5ea6\uff0c\u4e00\u6b65\u6b65\u7684\u5b8c\u6210\u5404\u79cd\u6df7\u6c8c\u5b9e\u9a8c\uff0c\u6df1\u5165\u8ba4\u8bc6\u548c\u4f7f\u7528\u6df7\u6c8c\u5de5\u7a0b\u3002"),(0,o.yg)("h2",{id:"chaosblade-operator"},"ChaosBlade-Operator"),(0,o.yg)("p",null,(0,o.yg)("a",{parentName:"p",href:"https://github.com/chaosblade-io/chaosblade-operator"},"ChaosBlade-Operator")," \u662f ChaosBlade \u7684 Kubernetes \u5e73\u53f0\u5b9e\u9a8c\u573a\u666f\u5b9e\u73b0\u3002\u5c06\u6df7\u6c8c\u5b9e\u9a8c\u901a\u8fc7 Kubernetes \u6807\u51c6\u7684 CRD \u65b9\u5f0f\u5b9a\u4e49\uff0c\u7528\u6237\u53ef\u4ee5\u50cf\u5b9a\u4e49 Deployment \u6216 StatefulSet \u90a3\u6837\u5b9a\u4e49 ChaosBlade \u5b9e\u9a8c\uff0c\u53ea\u8981\u5bf9 ",(0,o.yg)("inlineCode",{parentName:"p"},"kubectl")," \u548c Kubernetes \u5bf9\u8c61\u6709\u6240\u4e86\u89e3\uff0c\u5c31\u53ef\u4ee5\u8f7b\u677e\u7684\u521b\u5efa\u3001\u66f4\u65b0\u548c\u5220\u9664\u5b9e\u9a8c\u573a\u666f\uff1b\u540c\u65f6\u4e5f\u53ef\u4ee5\u901a\u8fc7 chaosblade cli \u5de5\u5177\u6765\u64cd\u4f5c\u5b9e\u9a8c\u573a\u666f\u3002"),(0,o.yg)("h3",{id:"\u5b89\u88c5"},"\u5b89\u88c5"),(0,o.yg)("p",null,"ChaosBlade-Operator \u9700\u8981\u4f7f\u7528 Helm \u5b89\u88c5\uff0c\u8fdb\u5165 ",(0,o.yg)("a",{parentName:"p",href:"https://github.com/chaosblade-io/chaosblade-operator/releases"},"release \u9875\u9762")," \u4e0b\u8f7d\u5b89\u88c5\u5305\uff08ChaosBlade \u8fd8\u63d0\u4f9b\u4e86\u963f\u91cc\u4e91 OSS \u7684\u4e0b\u8f7d\u5730\u5740\uff0c\u63d0\u5347\u56fd\u5185\u4e0b\u8f7d\u901f\u5ea6\uff09\u3002"),(0,o.yg)("p",null,"\u4f7f\u7528 Helm 3 \u5b89\u88c5\uff1a"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"# \u4e0b\u8f7d\u5b89\u88c5\u5305\n$ wget -qO chaosblade-operator-0.6.0.tgz https://chaosblade.oss-cn-hangzhou.aliyuncs.com/agent/github/0.6.0/chaosblade-operator-0.6.0-v3.tgz\n# \u4e3a chaosblade \u521b\u5efa\u4e00\u4e2a namespace\n$ kubectl create namespace chaosblade\n# \u5b89\u88c5 ChaosBlade-Operator\n$ helm install chaos chaosblade-operator-0.6.0.tgz --set webhook.enable=true --namespace=chaosblade\n# \u67e5\u770b\u5b89\u88c5\u7ed3\u679c\n$ kubectl get pod -n chaosblade | grep chaosblade\nchaosblade-operator-6b6b484599-gdgq8   1/1     Running   0          4d23h\nchaosblade-tool-7wtph                  1/1     Running   0          4d20h\nchaosblade-tool-r4zdk                  1/1     Running   0          4d23h\n")),(0,o.yg)("p",null,"ChaosBlade-Operator \u542f\u52a8\u540e\u5c06\u4f1a\u5728\u6bcf\u4e2a\u8282\u70b9\u90e8\u7f72\u4e00\u4e2a ",(0,o.yg)("inlineCode",{parentName:"p"},"chaosblade-tool")," Pod \u548c\u4e00\u4e2a ",(0,o.yg)("inlineCode",{parentName:"p"},"chaosblade-operator")," Pod\uff0c\u5982\u679c\u90fd\u8fd0\u884c\u6b63\u5e38\uff0c\u5219\u5b89\u88c5\u6210\u529f\u3002\u4e0a\u9762\u8bbe\u7f6e ",(0,o.yg)("inlineCode",{parentName:"p"},"--set webhook.enable=true")," \u662f\u4e3a\u4e86 Pod \u6587\u4ef6\u7cfb\u7edf I/O \u6545\u969c\u5b9e\u9a8c\uff0c\u5982\u679c\u4e0d\u9700\u8981\u8fdb\u884c\u8be5\u5b9e\u9a8c\uff0c\u5219\u65e0\u9700\u6dfb\u52a0\u8be5\u8bbe\u7f6e\u3002"),(0,o.yg)("h2",{id:"\u5feb\u901f\u5f00\u59cb"},"\u5feb\u901f\u5f00\u59cb"),(0,o.yg)("p",null,"\u4e0b\u9762\u5c31\u4ee5 Pod \u7f51\u7edc\u5ef6\u8fdf\u5b9e\u9a8c\u4e3a\u4f8b\uff0c\u5c55\u793a\u5982\u4f55\u4f7f\u7528 ChaosBlade-Operator\u3002"),(0,o.yg)("h3",{id:"\u5b9e\u9a8c\u51c6\u5907"},"\u5b9e\u9a8c\u51c6\u5907"),(0,o.yg)("p",null,"\u5b9e\u9a8c\u524d\u9700\u8981\u5148\u51c6\u5907\u5b9e\u9a8c\u5bf9\u8c61\uff0c\u8fd9\u91cc\u4f7f\u7528 ",(0,o.yg)("a",{parentName:"p",href:"https://github.com/cloudnativeapp/guestbook?spm=5176.2020520152.0.0.7c5f16ddH8myx6"},"guestbook")," \u5e94\u7528\u3002"),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"\u5b89\u88c5")),(0,o.yg)("p",null,"\u540c\u6837\u4f7f\u7528 Helm 3"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"# add repo\nhelm repo add apphub-incubator https://apphub.aliyuncs.com/incubator/\n# \u5b89\u88c5\nhelm install guestbook apphub-incubator/guestbook --set service.type=NodePort --namespace=chaosblade\n")),(0,o.yg)("p",null,"\u9ed8\u8ba4\u7684 Service \u7c7b\u578b\u4e3a ",(0,o.yg)("inlineCode",{parentName:"p"},"LoadBalancer"),"\uff0c\u8fd9\u91cc\u4e3a\u4e86\u65b9\u4fbf\u8bbf\u95ee\u8bbe\u7f6e\u4e3a\u4e86 ",(0,o.yg)("inlineCode",{parentName:"p"},"NodePort"),"\u3002"),(0,o.yg)("h3",{id:"\u5f00\u59cb\u5b9e\u9a8c"},"\u5f00\u59cb\u5b9e\u9a8c"),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"\u5b9e\u9a8c\u76ee\u6807\uff1a"),"\u5bf9 chaosblade \u547d\u540d\u7a7a\u95f4\u4e2d\uff0c\u5bf9 ",(0,o.yg)("inlineCode",{parentName:"p"},"redis-master-68857cd57c-dzbs9")," Pod \u7684\u672c\u5730 6379 \u7aef\u53e3\u6dfb\u52a0 3000 \u6beb\u79d2\u8bbf\u95ee\u5ef6\u8fdf\uff0c\u5ef6\u8fdf\u65f6\u95f4\u4e0a\u4e0b\u6d6e\u52a8 1000 \u6beb\u79d2\u3002"),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"\u5b9e\u9a8c yaml \u914d\u7f6e")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: chaosblade.io/v1alpha1\nkind: ChaosBlade\nmetadata:\n  name: delay-pod-network-by-names\nspec:\n  experiments:\n  - scope: pod\n    target: network\n    action: delay\n    desc: "delay pod network by names"\n    matchers:\n    - name: names\n      value:\n      - "redis-master-68857cd57c-dzbs9"\n    - name: namespace\n      value:\n      - "chaosblade"\n    - name: local-port\n      value: ["6379"]\n    - name: interface\n      value: ["eth0"]\n    - name: time\n      value: ["3000"]\n    - name: offset\n      value: ["1000"]\n')),(0,o.yg)("p",null,"\u5c06\u5176\u4fdd\u5b58\u4e3a ",(0,o.yg)("inlineCode",{parentName:"p"},"delay_pod_network_by_names.yaml")," \u5e76\u6267\u884c\u547d\u4ee4\uff0c\u5f00\u59cb\u5b9e\u9a8c\uff1a"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"$ kubectl apply -f delay_pod_network_by_names.yaml\n")),(0,o.yg)("h3",{id:"\u67e5\u770b\u5b9e\u9a8c\u72b6\u6001"},"\u67e5\u770b\u5b9e\u9a8c\u72b6\u6001"),(0,o.yg)("p",null,"\u6267\u884c ",(0,o.yg)("inlineCode",{parentName:"p"},"kubectl get blade delay-pod-network-by-names -o json")," \u547d\u4ee4\uff0c\u67e5\u770b\u5b9e\u9a8c\u72b6\u6001\uff1a"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-json"},'{\n    "apiVersion": "chaosblade.io/v1alpha1",\n    "kind": "ChaosBlade",\n    "metadata": {\n        "annotations": {\n            "kubectl.kubernetes.io/last-applied-configuration": "{\\"apiVersion\\":\\"chaosblade.io/v1alpha1\\",\\"kind\\":\\"ChaosBlade\\",\\"metadata\\":{\\"annotations\\":{},\\"name\\":\\"delay-pod-network-by-names\\"},\\"spec\\":{\\"experiments\\":[{\\"action\\":\\"delay\\",\\"desc\\":\\"delay pod network by names\\",\\"matchers\\":[{\\"name\\":\\"names\\",\\"value\\":[\\"redis-master-68857cd57c-dzbs9\\"]},{\\"name\\":\\"namespace\\",\\"value\\":[\\"chaosblade\\"]},{\\"name\\":\\"local-port\\",\\"value\\":[\\"6379\\"]},{\\"name\\":\\"interface\\",\\"value\\":[\\"eth0\\"]},{\\"name\\":\\"time\\",\\"value\\":[\\"3000\\"]},{\\"name\\":\\"offset\\",\\"value\\":[\\"1000\\"]}],\\"scope\\":\\"pod\\",\\"target\\":\\"network\\"}]}}\\n"\n        },\n        "creationTimestamp": "2020-06-02T05:57:50Z",\n        "finalizers": [\n            "finalizer.chaosblade.io"\n        ],\n        "generation": 1,\n        "name": "delay-pod-network-by-names",\n        "resourceVersion": "7710394",\n        "selfLink": "/apis/chaosblade.io/v1alpha1/chaosblades/delay-pod-network-by-names",\n        "uid": "1235ff55-8256-4caa-a371-e1abf6c9e7b7"\n    },\n    "spec": {\n        "experiments": [\n            {\n                "action": "delay",\n                "desc": "delay pod network by names",\n                "matchers": [\n                    {\n                        "name": "names",\n                        "value": [\n                            "redis-master-68857cd57c-dzbs9"\n                        ]\n                    },\n                    {\n                        "name": "namespace",\n                        "value": [\n                            "chaosblade"\n                        ]\n                    },\n                    {\n                        "name": "local-port",\n                        "value": [\n                            "6379"\n                        ]\n                    },\n                    {\n                        "name": "interface",\n                        "value": [\n                            "eth0"\n                        ]\n                    },\n                    {\n                        "name": "time",\n                        "value": [\n                            "3000"\n                        ]\n                    },\n                    {\n                        "name": "offset",\n                        "value": [\n                            "1000"\n                        ]\n                    }\n                ],\n                "scope": "pod",\n                "target": "network"\n            }\n        ]\n    },\n    "status": {\n        "expStatuses": [\n            {\n                "action": "delay",\n                "resStatuses": [\n                    {\n                        "id": "a86f8cf8b68ace98",\n                        "kind": "pod",\n                        "name": "redis-master",\n                        "nodeName": "keking",\n                        "state": "Success",\n                        "success": true,\n                        "uid": "619a19ceb213f9b6152159bd868e88de2ddbf9a8aac606dc274b34bec6510c60"\n                    }\n                ],\n                "scope": "pod",\n                "state": "Success",\n                "success": true,\n                "target": "network"\n            }\n        ],\n        "phase": "Running"\n    }\n}\n')),(0,o.yg)("p",null,"\u53ef\u4ee5\u770b\u5230\u5b9e\u9a8c\u6210\u529f\u521b\u5efa\u4e86\u3002"),(0,o.yg)("h3",{id:"\u89c2\u6d4b\u7ed3\u679c"},"\u89c2\u6d4b\u7ed3\u679c"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"# \u83b7\u53d6\u5b9e\u9a8c pod ip\n$ kubectl get pod -l app=redis,role=master -o jsonpath={.items..status.podIP}\n10.42.69.44\n# \u8fdb\u5165\u89c2\u6d4b pod\n$ kubectl exec -it redis-slave-6dd975d4c8-2zrkb bash\n# \u5728 pod \u4e2d\u5b89\u88c5 telnet\n$ apt-get update && apt-get install -y telnet\n# \u6d4b\u8bd5\u65f6\u95f4\n$ time echo \"\" | telnet 10.42.69.44 6379\nTrying 10.42.69.44...\nConnected to 10.42.69.44.\nEscape character is '^]'.\nConnection closed by foreign host.\n\nreal    0m3.790s\nuser    0m0.007s\nsys     0m0.001s\n")),(0,o.yg)("p",null,(0,o.yg)("img",{parentName:"p",src:"https://tva3.sinaimg.cn/large/ad5fbf65gy1gfm2deqtdwg20p606c1kx.gif",alt:null})),(0,o.yg)("p",null,"\u53ef\u4ee5\u770b\u5230\u7ed3\u679c\u7b26\u5408\u9884\u671f\u3002"),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"\u505c\u6b62\u5b9e\u9a8c")),(0,o.yg)("p",null,"\u6267\u884c\u547d\u4ee4\uff1a",(0,o.yg)("inlineCode",{parentName:"p"},"kubectl delete -f delay_pod_network_by_names.yaml")),(0,o.yg)("p",null,"\u6216\u8005\u76f4\u63a5\u5220\u9664 blade \u8d44\u6e90\uff1a",(0,o.yg)("inlineCode",{parentName:"p"},"kubectl delete blade delay-pod-network-by-names")),(0,o.yg)("h2",{id:"\u7ed3\u8bed"},"\u7ed3\u8bed"),(0,o.yg)("p",null,"\u672c\u7bc7\u6211\u4eec\u8bb2\u89e3\u4e86\u5982\u4f55\u90e8\u7f72 ChaosBlade-Operator \u5e76\u8fdb\u884c\u4e86\u7b80\u5355\u7684\u5b9e\u9a8c\uff0c\u53ef\u4ee5\u770b\u5230\u5728\u4e91\u539f\u751f\u573a\u666f\u4e0b\uff0cChaosBlade \u4f9d\u65e7\u6709\u7740\u7b80\u5355\u7684\u64cd\u4f5c\u65b9\u5f0f\uff0c\u591a\u79cd\u5b9e\u9a8c\u573a\u666f\uff0c\u5e76\u5bf9\u6df7\u6c8c\u5b9e\u9a8c\u6a21\u578b\u8fdb\u884c\u4e86\u6807\u51c6\u5316\u5b9e\u73b0\u3002\u5f88\u53cb\u597d\u7684\u5c06\u6df7\u6c8c\u5b9e\u9a8c\u6a21\u578b\u4e0e Kubernetes \u58f0\u660e\u5f0f\u8bbe\u8ba1\u7ed3\u5408\u5728\u4e00\u8d77\uff0c\u4f9d\u9760\u6df7\u6c8c\u5b9e\u9a8c\u6a21\u578b\u4fbf\u6377\u5f00\u53d1\u573a\u666f\u7684\u540c\u65f6\uff0c\u53c8\u53ef\u4ee5\u5f88\u597d\u7684\u7ed3\u5408 Kubernetes \u8bbe\u8ba1\u7406\u5ff5\u3002"))}u.isMDXComponent=!0}}]);